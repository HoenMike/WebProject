@inject ApplicationDbContext DbContext
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using MudBlazor

<MudDialog>
  <DialogContent>
    <MudGrid>
      <MudItem xs="12">
        <MudTextField @bind-Value="newItem.Name" Label="Name" Required="true" />
      </MudItem>
      <MudItem xs="12">
        <MudTextField @bind-Value="newItem.Price" Label="Price" Required="true" InputType="InputType.Number" />
      </MudItem>
      <MudItem xs="12">
        <MudTextField @bind-Value="newItem.ThumbnailUrl" Label="Thumbnail URL" />
      </MudItem>
      <MudItem xs="12">
        <MudTextField @bind-Value="newItem.Description" Label="Description" Textarea="true" Rows="3" />
      </MudItem>
      <MudItem xs="12">
        <MudTextField @bind-Value="newItem.StockQuantity" Label="Stock Quantity" Required="true" InputType="InputType.Number" />
      </MudItem>
      <MudItem xs="12">
        <MudAutocomplete T="string" @bind-Value="tagInput" Label="Tags" SearchFunc="SearchTags" ToStringFunc="@(tag => tag)" Clearable="true" />
        <MudChipSet T="string" AllClosable OnClose="Closed">
          @foreach (var value in selectedTags)
          {
            <MudChip Text="@value"></MudChip>
          }
        </MudChipSet>
        <div class="d-flex flex-column align-center">
          <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddTag">Add chip</MudButton>
        </div>
      </MudItem>
    </MudGrid>
  </DialogContent>
  <DialogActions>
    <MudButton Variant="Variant.Filled" OnClick="AddItem" Color="Color.Success">Add</MudButton>
    <MudButton OnClick="Cancel" Color="Color.Primary">Cancel</MudButton>
  </DialogActions>
</MudDialog>

@code {
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  private Item newItem = new();
  private string tagInput = string.Empty;
  private List<string> selectedTags = new();

  private async Task<IEnumerable<string>> SearchTags(string value, CancellationToken cancellationToken)
  {
    if (string.IsNullOrEmpty(value))
      return new List<string>();

    return await DbContext.Tags
    .Where(t => t.Name.Contains(value))
    .Select(t => t.Name)
    .ToListAsync(cancellationToken);
  }

  private async Task AddItem()
  {
    if (string.IsNullOrWhiteSpace(newItem.Name))
    {
      Snackbar.Add("Name cannot be empty", Severity.Error);
      return;
    }

    try
    {
      DbContext.Items.Add(newItem);
      await DbContext.SaveChangesAsync();

      foreach (var tagName in selectedTags)
      {
        var tag = await DbContext.Tags.FirstOrDefaultAsync(t => t.Name == tagName);
        if (tag == null)
        {
          tag = new Tag { Name = tagName, Type = "default" };
          DbContext.Tags.Add(tag);
          await DbContext.SaveChangesAsync();
        }

        var itemTag = new ItemTag { ItemId = newItem.Id, TagId = tag.Id };
        DbContext.ItemTags.Add(itemTag);
      }

      await DbContext.SaveChangesAsync();
      Snackbar.Add("Item added successfully", Severity.Success);
      MudDialog.Close(DialogResult.Ok(newItem));
    }
    catch (Exception ex)
    {
      var innerExceptionMessage = ex.InnerException?.Message ?? ex.Message;
      Snackbar.Add($"Error adding item: {innerExceptionMessage}", Severity.Error);
    }
  }

  private void Cancel()
  {
    MudDialog.Cancel();
  }

  private void AddTag()
  {
    if (!string.IsNullOrWhiteSpace(tagInput) && !selectedTags.Contains(tagInput))
    {
      selectedTags.Add(tagInput);
      tagInput = string.Empty;
    }
  }

  private void Closed(MudChip<string> chip)
  {
    selectedTags.Remove(chip.Text);
  }
}