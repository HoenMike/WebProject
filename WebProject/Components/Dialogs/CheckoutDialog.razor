@page "/checkoutdialog"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using WebProject.Models
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@inject ApplicationDbContext DbContext
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject CartController CartController

@rendermode InteractiveServer

<DialogContent style="margin:24px">
  

  @if (isLoading)
  {
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
  }
  else
  {
    <MudGrid>
      <MudItem xs="12">
        <MudCard Outlined="true">
          <MudCardHeader>
            <CardHeaderContent>
              <MudText Typo="Typo.h6">Shipping Information</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
              <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Href="/shippinginfo"
                Title="Edit Shipping Information" />
            </CardHeaderActions>
          </MudCardHeader>
          <MudCardContent>
            @if (missingShippingInfo)
            {
              <MudAlert Severity="Severity.Warning">
                Shipping information is missing. Please <MudLink Href="/shippinginfo">add your shipping information
                </MudLink>.
              </MudAlert>
            }
            else
            {
              <MudGrid>
                <MudItem xs="12" sm="6">
                  <MudText><strong>Receiver Name:</strong> @CheckoutInput.ReceiverName</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                  <MudText><strong>Phone Number:</strong> @CheckoutInput.PhoneNumber</MudText>
                </MudItem>
                <MudItem xs="12">
                  <MudText><strong>Address:</strong> @CheckoutInput.Address</MudText>
                </MudItem>
              </MudGrid>
            }
          </MudCardContent>
        </MudCard>
      </MudItem>

      <MudItem xs="12">
        <MudCard Outlined="true">
          <MudCardHeader>
            <CardHeaderContent>
              <MudText Typo="Typo.h6">Payment Method</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
              <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Href="/paymentinfo"
                Title="Edit Payment Information" />
            </CardHeaderActions>
          </MudCardHeader>
          <MudCardContent>
            @if (missingPaymentInfo)
            {
              <MudAlert Severity="Severity.Warning">
                Payment information is missing. Please <MudLink Href="/paymentinfo">add your payment information</MudLink>.
              </MudAlert>
            }
            else
            {
              <EditForm Model="CheckoutInput" OnValidSubmit="OnValidSubmitAsync">
                <DataAnnotationsValidator />
                <MudGrid>
                  <MudItem xs="12">
                    <MudSelect T="PaymentMethod" @bind-Value="CheckoutInput.PaymentMethod" Label="Payment Method"
                      Required="true" RequiredError="Payment Method is required">
                      <MudSelectItem Value="PaymentMethod.Cash">Cash</MudSelectItem>
                      <MudSelectItem Value="PaymentMethod.CreditCard">Credit Card</MudSelectItem>
                    </MudSelect>
                  </MudItem>

                  @if (CheckoutInput.PaymentMethod == PaymentMethod.CreditCard)
                  {
                    <MudItem xs="12" sm="6">
                      <MudText><strong>Card Holder:</strong> @CheckoutInput.CardHolderName</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                      <MudText><strong>Card Number:</strong> @MaskCardNumber(CheckoutInput.CardNumber)</MudText>
                    </MudItem>
                  }
                  else
                  {
                    <MudItem xs="12">
                      <MudText>Payment will be made in cash</MudText>
                    </MudItem>
                  }
                </MudGrid>
              </EditForm>
            }
          </MudCardContent>
        </MudCard>
      </MudItem>

      <MudItem xs="12">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" class="check-out-btn" style="padding: 12px 0;" FullWidth="true"
          OnClick="OnValidSubmitAsync">
          Proceed to Checkout
        </MudButton>
      </MudItem>
    </MudGrid>
  }
</DialogContent>

@code {
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  private CheckoutInputModel CheckoutInput { get; set; } = new();
  private bool isLoading = true;
  private bool missingShippingInfo = false;
  private bool missingPaymentInfo = false;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var userId = await CartController.GetUserId();

      var shippingInfo = await DbContext.UserShippingInfos.FirstOrDefaultAsync(u => u.UserId == userId);
      var paymentInfo = await DbContext.UserCards.FirstOrDefaultAsync(u => u.UserId == userId && u.IsPrimary);

      if (shippingInfo != null)
      {
        CheckoutInput.ReceiverName = shippingInfo.ReceiverName;
        CheckoutInput.Address = shippingInfo.Address;
        CheckoutInput.PhoneNumber = shippingInfo.PhoneNumber;
        CheckoutInput.PaymentMethod = shippingInfo.PaymentMethod;
      }
      else
      {
        missingShippingInfo = true;
      }

      if (paymentInfo != null)
      {
        CheckoutInput.CardHolderName = paymentInfo.CardHolderName;
        CheckoutInput.CardNumber = paymentInfo.CardNumber;
        CheckoutInput.ExpiryDate = paymentInfo.ExpiryDate;
        CheckoutInput.Cvv = paymentInfo.Cvv;
      }
      else if (CheckoutInput.PaymentMethod == PaymentMethod.CreditCard)
      {
        missingPaymentInfo = true;
      }
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading checkout information: {ex.Message}", Severity.Error);
    }
    finally
    {
      isLoading = false;
    }
  }

  private async Task OnValidSubmitAsync()
  {
    try
    {
      var userId = await CartController.GetUserId();

      // Validate both shipping and payment information
      if (missingShippingInfo)
      {
        NavigationManager.NavigateTo("/shippinginfo");
        return;
      }

      if (CheckoutInput.PaymentMethod == PaymentMethod.CreditCard && missingPaymentInfo)
      {
        NavigationManager.NavigateTo("/paymentinfo");
        return;
      }

      var existingShippingInfo = await DbContext.UserShippingInfos.FirstOrDefaultAsync(u => u.UserId == userId);
      if (existingShippingInfo != null)
      {
        existingShippingInfo.ReceiverName = CheckoutInput.ReceiverName ?? string.Empty;
        existingShippingInfo.Address = CheckoutInput.Address ?? string.Empty;
        existingShippingInfo.PhoneNumber = CheckoutInput.PhoneNumber ?? string.Empty;
        existingShippingInfo.PaymentMethod = CheckoutInput.PaymentMethod;
        DbContext.UserShippingInfos.Update(existingShippingInfo);
      }

      if (CheckoutInput.PaymentMethod == PaymentMethod.CreditCard)
      {
        var existingCard = await DbContext.UserCards.FirstOrDefaultAsync(c => c.UserId == userId && c.CardNumber ==
        CheckoutInput.CardNumber);
        if (existingCard != null)
        {
          existingCard.CardHolderName = CheckoutInput.CardHolderName ?? string.Empty;
          existingCard.ExpiryDate = CheckoutInput.ExpiryDate;
          existingCard.Cvv = CheckoutInput.Cvv ?? string.Empty;
          existingCard.IsPrimary = true;
          DbContext.UserCards.Update(existingCard);
        }
      }

      await DbContext.SaveChangesAsync();

      MudDialog.Close(DialogResult.Ok(CheckoutInput.PaymentMethod));
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error saving checkout information: {ex.Message}", Severity.Error);
    }
  }

  private string MaskCardNumber(string? cardNumber)
  {
    if (string.IsNullOrEmpty(cardNumber) || cardNumber.Length <= 4)
      return cardNumber;

    return $"**** **** **** {cardNumber.Substring(cardNumber.Length - 4)}";
  }

  private sealed class CheckoutInputModel
  {
    [Required(ErrorMessage = "Receiver Name is required")]
    [StringLength(100, ErrorMessage = "Receiver Name cannot be longer than 100 characters")]
    public string? ReceiverName { get; set; }

    [Required(ErrorMessage = "Address is required")]
    [StringLength(255, ErrorMessage = "Address cannot be longer than 255 characters")]
    public string? Address { get; set; }

    [Required(ErrorMessage = "Phone Number is required")]
    [StringLength(20, ErrorMessage = "Phone Number cannot be longer than 20 characters")]
    public string? PhoneNumber { get; set; }

    [Required(ErrorMessage = "Payment Method is required")]
    public PaymentMethod PaymentMethod { get; set; } = PaymentMethod.Cash;

    public string? CardHolderName { get; set; }

    public string? CardNumber { get; set; }

    [DataType(DataType.Date)]
    public DateTime ExpiryDate { get; set; } = DateTime.Now.AddYears(1);

    public string? Cvv { get; set; }
  }
}