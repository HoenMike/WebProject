@page "/cart"
@using WebProject.Models
@using WebProject.Services
@inject CartService CartService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using MudBlazor

@rendermode InteractiveServer

<PageTitle>Your Cart</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
  <MudText Typo="Typo.h3" Class="mb-4">Your Cart</MudText>

  @if (isLoading)
  {
    <MudGrid>
      <MudItem xs="12" md="8">
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="margin-bottom: 20px;" />
      </MudItem>
    </MudGrid>
  }
  else if (cartItems.Count > 0)
  {
    <MudGrid>
      <MudItem xs="12" md="7">
        <MudCard>
          <MudCardContent>
            <MudTable Items="@cartItems" Hover="true" Elevation="0" Context="item">
              <HeaderContent>
                <MudTh>
                  <MudCheckBox T="bool" @bind-Value="selectAll" @bind-Value:after="() => SelectAllChanged(selectAll)"
                    Color="Color.Primary" />
                </MudTh>
                <MudTh>Product</MudTh>
                <MudTh>Unit Price</MudTh>
                <MudTh>Quantity</MudTh>
                <MudTh>Item Total</MudTh>
                <MudTh>Actions</MudTh>
              </HeaderContent>
              <RowTemplate>
                <MudTd>
                  <MudCheckBox T="bool" @bind-Value="item.IsSelected"
                    @bind-Value:after="() => OnItemSelectedChanged(item, item.IsSelected)" Color="Color.Primary" />
                </MudTd>
                <MudTd DataLabel="Product">
                  <div class="d-flex align-center">
                    <MudAvatar Size="Size.Large" Class="mr-3">
                      <MudImage Src="@item.ThumbnailUrl"></MudImage>
                    </MudAvatar>
                    <MudText>@item.Name</MudText>
                  </div>
                </MudTd>
                <MudTd DataLabel="Unit Price">@item.Price.ToString("C")</MudTd>
                <MudTd DataLabel="Quantity">
                  <div class="d-flex align-center">
                    <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Default" Size="Size.Small"
                      Disabled="@(item.Quantity <= 1)" OnClick="() => DecreaseQuantity(item)" />
                    <MudText Class="mx-2">@item.Quantity</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Default" Size="Size.Small"
                      OnClick="() => IncreaseQuantity(item)" />
                  </div>
                </MudTd>
                <MudTd DataLabel="Item Total">
                  @{
                    var itemTotal = item.Price * item.Quantity;
                  }
                  @itemTotal.ToString("C")
                </MudTd>
                <MudTd DataLabel="Actions">
                  <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                    OnClick="() => RemoveFromCart(item.ItemId)" />
                </MudTd>
              </RowTemplate>
            </MudTable>
          </MudCardContent>
        </MudCard>
      </MudItem>

      <MudItem xs="12" md="5">
        <MudCard>
          <MudCardHeader>
            <MudText Typo="Typo.h6">Order Summary</MudText>
          </MudCardHeader>
          <MudCardContent>
            <MudGrid>


              <MudItem xs="6">
                <MudText Typo="Typo.h6">Selected Items</MudText>
              </MudItem>
              <MudItem xs="6" Class="d-flex justify-end">
                <MudText>@selectedItemsCount</MudText>
              </MudItem>
              <MudItem xs="6">
                <MudText Typo="Typo.h6">Selected Total</MudText>
              </MudItem>
              <MudItem xs="6" Class="d-flex justify-end">
                <MudText Typo="Typo.h6">@selectedTotalPrice.ToString("C")</MudText>
              </MudItem>
            </MudGrid>
          </MudCardContent>
          <MudCardActions>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" OnClick="ProceedToCheckout">
              Proceed to Checkout
            </MudButton>
          </MudCardActions>
        </MudCard>
      </MudItem>
    </MudGrid>
  }
  else
  {
    <MudCard>
      <MudCardContent>
        <MudAlert Severity="Severity.Normal">Your cart is empty</MudAlert>
      </MudCardContent>
    </MudCard>
  }
</MudContainer>

@code {
  private List<CartItem> cartItems = new();
  private decimal totalPrice = 0;
  private decimal selectedTotalPrice = 0;
  private int selectedItemsCount = 0;
  private bool isRendered = false;
  private bool isLoading = true;
  private bool selectAll;

  protected override async Task OnInitializedAsync()
  {
    await LoadCart();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      isRendered = true;
      await LoadCart();
    }
  }

  private async Task LoadCart()
  {
    isLoading = true;
    cartItems = await CartService.GetCartItemsAsync();
    totalPrice = cartItems.Sum(item => item.Price * item.Quantity);

    // Reset selected items state
    selectAll = false;
    foreach (var item in cartItems)
    {
      item.IsSelected = false;
    }

    UpdateSelectedTotalPrice();
    isLoading = false;
    StateHasChanged();
  }

  private async Task DecreaseQuantity(CartItem item)
  {
    if (item.Quantity > 1)
    {
      item.Quantity--;
      var product = await CartService.GetProductByIdAsync(item.ItemId);
      if (product != null)
      {
        product.StockQuantity++;
        await CartService.UpdateQuantityAsync(item.ItemId, item.Quantity);
        await CartService.UpdateProductStockAsync(product);
        await LoadCart();
      }
    }
  }

  private async Task IncreaseQuantity(CartItem item)
  {
    var product = await CartService.GetProductByIdAsync(item.ItemId);
    if (product != null && item.Quantity < product.StockQuantity)
    {
      item.Quantity++;
      product.StockQuantity--;
      await CartService.UpdateQuantityAsync(item.ItemId, item.Quantity);
      await CartService.UpdateProductStockAsync(product);
      await LoadCart();
    }
    else
    {
      Snackbar.Add("Not enough stock available", Severity.Warning);
    }
  }

  private async Task RemoveFromCart(int itemId)
  {
    await CartService.RemoveFromCartAsync(itemId);
    await LoadCart();
    Snackbar.Add("Item removed from cart", Severity.Info);
  }
  private async Task ProceedToCheckout()
  {
    if (cartItems.Count == 0)
    {
      Snackbar.Add("Your cart is empty", Severity.Warning);
      return;
    }

    var selectedItems = cartItems.Where(item => item.IsSelected).ToList();
    if (selectedItems.Count == 0)
    {
      Snackbar.Add("Please select items to checkout", Severity.Warning);
      return;
    }

    var parameters = new DialogParameters();
    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

    var dialog = DialogService.Show<CheckoutDialog>("Checkout", parameters, options);
    var result = await dialog.Result;

    if (!result.Canceled)
    {
      try
      {
        await CartService.DemoCheckoutAsync(selectedItems);
        Snackbar.Add("Checkout successful", Severity.Success);
        await LoadCart();
      }
      catch (Exception ex)
      {
        Snackbar.Add($"Checkout failed: {ex.Message}", Severity.Error);
      }
    }
  }
  private void SelectAllChanged(bool value)
  {
    selectAll = value;
    foreach (var item in cartItems)
    {
      item.IsSelected = value;
    }
    UpdateSelectedTotalPrice();
    StateHasChanged();
  }

  private void OnItemSelectedChanged(CartItem item, bool value)
  {
    item.IsSelected = value;
    selectAll = cartItems.All(x => x.IsSelected);
    UpdateSelectedTotalPrice();
  }

  private void UpdateSelectedTotalPrice()
  {
    var selectedItems = cartItems.Where(item => item.IsSelected).ToList();
    selectedTotalPrice = selectedItems.Sum(item => item.Price * item.Quantity);
    selectedItemsCount = selectedItems.Count;
  }
}
