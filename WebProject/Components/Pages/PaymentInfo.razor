@page "/paymentinfo"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebProject.Components.Account
@using WebProject.Data
@using WebProject.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Http

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject ILogger<UserCard> Logger
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer

<PageTitle>Payment Information</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
  <MudText Typo="Typo.h3">Payment Information</MudText>

  @if (!string.IsNullOrEmpty(StatusMessage))
  {
    <MudAlert Severity="@(StatusMessageType == "alert-success" ? Severity.Success : Severity.Error)">
      @StatusMessage
    </MudAlert>
  }

  <MudAlert Severity="Severity.Warning">
    <strong>Demo Version Warning:</strong> This is a demonstration version. Card details are stored in plain text
    and are not validated or encrypted. <strong>DO NOT</strong> use real credit card information.
  </MudAlert>

  <MudGrid>
    <MudItem xs="12" md="6">
      <MudForm Model="Input" @ref="form" OnValidSubmit="OnValidSubmitAsync">
        <MudTextField @bind-Value="Input.CardHolderName" Label="Card Holder Name" Required="true" RequiredError="Card Holder Name is required" />
        <MudTextField @bind-Value="Input.CardNumber" Label="Card Number" Required="true" RequiredError="Card Number is required" />
        <MudGrid>
          <MudItem xs="12" md="6">
            <MudDatePicker @bind-Value="Input.ExpiryDate" Label="Expiry Date" Required="true" RequiredError="Expiry Date is required" />
          </MudItem>
          <MudItem xs="12" md="6">
            <MudTextField @bind-Value="Input.Cvv" Label="CVV" Required="true" RequiredError="CVV is required" />
          </MudItem>
        </MudGrid>
        <MudCheckBox T="bool" @bind-Checked="Input.IsPrimary" Label="Set as Primary Card" />
        <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Save Payment Information</MudButton>
      </MudForm>
    </MudItem>

    @if (ExistingCards.Any())
    {
      <MudItem xs="12" md="6">
        <MudText Typo="Typo.h4">Existing Cards</MudText>
        <MudList T="UserCard">
          @foreach (var card in ExistingCards)
          {
            <MudListItem T="UserCard">
              <MudGrid>
                <MudItem xs="8">
                  <MudText Typo="Typo.h6">@card.CardHolderName</MudText>
                  <MudText>**** **** **** @card.CardNumber.Substring(Math.Max(0, card.CardNumber.Length - 4))</MudText>
                  <MudText>Expires: @card.ExpiryDate.ToString("MM/yyyy")</MudText>
                  @if (card.IsPrimary)
                  {
                    <MudText Color="Color.Success">Primary Card</MudText>
                  }
                </MudItem>
                <MudItem xs="4" Align="Align.End">
                  <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DeleteCardAsync(card.Id)">Remove</MudButton>
                </MudItem>
              </MudGrid>
            </MudListItem>
          }
        </MudList>
      </MudItem>
    }
  </MudGrid>
</MudContainer>

@code {
  private ApplicationUser user = default!;
  private List<UserCard> ExistingCards = new();
  private string StatusMessage = string.Empty;
  private string StatusMessageType = "alert-success";
  private MudForm? form;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var httpContext = HttpContextAccessor.HttpContext;
      if (httpContext == null)
      {
        throw new InvalidOperationException("HttpContext is null");
      }

      user = await UserAccessor.GetRequiredUserAsync(httpContext);

      // Fetch existing cards for the current user
      ExistingCards = await DbContext.UserCards
      .Where(c => c.UserId == user.Id)
      .ToListAsync();
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error initializing payment info page");
      StatusMessage = $"An error occurred: {ex.Message}";
      StatusMessageType = "alert-danger";
    }
  }

  private async Task OnValidSubmitAsync()
  {
    try
    {
      // If setting this card as primary, update existing primary cards
      if (Input.IsPrimary)
      {
        var existingPrimaryCards = await DbContext.UserCards
        .Where(c => c.UserId == user.Id && c.IsPrimary)
        .ToListAsync();

        foreach (var primaryCard in existingPrimaryCards)
        {
          primaryCard.IsPrimary = false;
        }
      }

      // Create new UserCard
      var newCard = new UserCard
        {
          UserId = user.Id,
          CardHolderName = Input.CardHolderName ?? string.Empty,
          CardNumber = Input.CardNumber ?? string.Empty,
          ExpiryDate = Input.ExpiryDate,
          Cvv = Input.Cvv ?? string.Empty,
          IsPrimary = Input.IsPrimary
        };

      DbContext.UserCards.Add(newCard);
      await DbContext.SaveChangesAsync();

      // Refresh the list of cards
      ExistingCards = await DbContext.UserCards
      .Where(c => c.UserId == user.Id)
      .ToListAsync();

      // Reset input form
      Input = new InputModel();

      StatusMessage = "Payment information added successfully.";
      StatusMessageType = "alert-success";
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error saving payment information");
      StatusMessage = $"Error: {ex.Message}";
      StatusMessageType = "alert-danger";
    }
  }

  private async Task DeleteCardAsync(int cardId)
  {
    try
    {
      var cardToRemove = await DbContext.UserCards.FindAsync(cardId);
      if (cardToRemove != null)
      {
        DbContext.UserCards.Remove(cardToRemove);
        await DbContext.SaveChangesAsync();

        // Refresh the list of cards
        ExistingCards = await DbContext.UserCards
        .Where(c => c.UserId == user.Id)
        .ToListAsync();

        StatusMessage = "Card removed successfully.";
        StatusMessageType = "alert-success";
      }
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error removing card");
      StatusMessage = $"Error removing card: {ex.Message}";
      StatusMessageType = "alert-danger";
    }
  }

  private sealed class InputModel
  {
    [Required(ErrorMessage = "Card Holder Name is required")]
    [StringLength(100, ErrorMessage = "Card Holder Name cannot be longer than 100 characters")]
    public string? CardHolderName { get; set; }

    [Required(ErrorMessage = "Card Number is required")]
    [StringLength(255, ErrorMessage = "Card Number cannot be longer than 255 characters")]
    public string? CardNumber { get; set; }

    [Required(ErrorMessage = "Expiry Date is required")]
    [DataType(DataType.Date)]
    public DateTime ExpiryDate { get; set; } = DateTime.Now.AddYears(1);

    [Required(ErrorMessage = "CVV is required")]
    [StringLength(255, ErrorMessage = "CVV cannot be longer than 255 characters")]
    public string? Cvv { get; set; }

    public bool IsPrimary { get; set; }
  }
}