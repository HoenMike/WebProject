@page "/paymentinfo"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebProject.Components.Account
@using WebProject.Data
@using WebProject.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Http

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject ILogger<UserCard> Logger
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer

<PageTitle>Payment Information</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
  <MudCard Class="pa-4 mb-4 mt-4">
    <MudText Typo="Typo.h3">Payment Information</MudText>
    <MudAlert Severity="Severity.Warning">
      <strong>Demo Version Warning:</strong> This is a demonstration version. Card details are stored in plain text
      and are not validated or encrypted. <strong>DO NOT</strong> use real credit card information.
    </MudAlert>
    <MudGrid>
      <MudItem xs="12">
        <MudCardContent>
          <MudText Typo="Typo.h4">Add New Card</MudText>
          @if (!string.IsNullOrEmpty(CardStatusMessage))
          {
            <MudAlert Severity="@(CardStatusMessageType == "alert-success" ? Severity.Success : Severity.Error)">
              @CardStatusMessage
            </MudAlert>
          }
          @if (ExistingCards.Count >= 3)
          {
            <MudAlert Severity="Severity.Error">
              You can only add up to 3 cards.
            </MudAlert>
          }
          else
          {
            <EditForm Model="CardInput" OnValidSubmit="OnValidSubmitCardAsync">
              <DataAnnotationsValidator />
              <MudTextField @bind-Value="CardInput.CardHolderName" Label="Card Holder Name" Required="true" RequiredError="Card Holder Name is required" />

              <MudTextField @bind-Value="CardInput.CardNumber" Label="Card Number" Required="true" RequiredError="Card Number is required" />

              <MudDatePicker @bind-Value="CardInput.ExpiryDate" Label="Expiry Date" Required="true" RequiredError="Expiry Date is required" DateFormat="MM/yyyy" MinDate="@DateTime.Now" OpenTo="OpenTo.Year" FixDay="1" Views="new[] { CalendarView.Year, CalendarView.Month }" />

              <MudTextField @bind-Value="CardInput.Cvv" Label="CVV" Required="true" RequiredError="CVV is required" />

              <MudCheckBox T="bool" @bind-Value="CardInput.IsPrimary" Label="Set as Primary Card" />

              <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
                Save Card Information
              </MudButton>
            </EditForm>
          }
        </MudCardContent>
      </MudItem>

      @if (ExistingCards.Any())
      {
        <MudItem xs="6">
          <MudCard>
            <MudCardContent>
              <MudText Typo="Typo.h4">Existing Cards</MudText>
              <MudList T="UserCard">
                @foreach (var card in ExistingCards)
                {
                  <MudListItem T="UserCard">
                    <MudGrid>
                      <MudItem xs="8">
                        <MudText Typo="Typo.h6">@card.CardHolderName</MudText>
                        <MudText>**** **** **** @card.CardNumber.Substring(Math.Max(0, card.CardNumber.Length - 4))
                        </MudText>
                        <MudText>Expires: @card.ExpiryDate.ToString("MM/yyyy")</MudText>
                        @if (card.IsPrimary)
                        {
                          <MudText Color="Color.Success">Primary Card</MudText>
                        }
                      </MudItem>
                      <MudItem xs="4" Align="Align.End">
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DeleteCardAsync(card.Id)">
                          Remove
                        </MudButton>
                      </MudItem>
                    </MudGrid>
                  </MudListItem>
                }
              </MudList>
            </MudCardContent>
          </MudCard>
        </MudItem>
      }
    </MudGrid>
  </MudCard>
</MudContainer>

@code {
  private ApplicationUser user = default!;
  private List<UserCard> ExistingCards = new();
  private string CardStatusMessage = string.Empty;
  private string CardStatusMessageType = "alert-success";

  [SupplyParameterFromForm]
  private CardInputModel CardInput { get; set; } = new();

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var httpContext = HttpContextAccessor.HttpContext;
      if (httpContext == null)
      {
        throw new InvalidOperationException("HttpContext is null");
      }

      user = await UserAccessor.GetRequiredUserAsync(httpContext);

      // Fetch existing cards for the current user
      ExistingCards = await DbContext.UserCards
      .Where(c => c.UserId == user.Id)
      .ToListAsync();
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error initializing payment info page");
      CardStatusMessage = $"An error occurred: {ex.Message}";
      CardStatusMessageType = "alert-danger";
    }
  }

  private async Task OnValidSubmitCardAsync()
  {
    try
    {
      // Check if the user already has 3 cards
      if (ExistingCards.Count >= 3)
      {
        CardStatusMessage = "You can only add up to 3 cards.";
        CardStatusMessageType = "alert-danger";
        return;
      }

      // Begin a database transaction to ensure consistency
      await using var transaction = await DbContext.Database.BeginTransactionAsync();

      try
      {
        // If setting this card as primary, update existing primary cards
        if (CardInput.IsPrimary)
        {
          var existingPrimaryCards = await DbContext.UserCards
          .Where(c => c.UserId == user.Id && c.IsPrimary)
          .ToListAsync();

          foreach (var primaryCard in existingPrimaryCards)
          {
            primaryCard.IsPrimary = false;
          }
          await DbContext.SaveChangesAsync();
        }

        // Create new UserCard with all properties
        var newCard = new UserCard
          {
            UserId = user.Id,
            CardHolderName = CardInput.CardHolderName ?? string.Empty,
            CardNumber = CardInput.CardNumber ?? string.Empty,
            ExpiryDate = CardInput.ExpiryDate,
            Cvv = CardInput.Cvv ?? string.Empty,
            IsPrimary = CardInput.IsPrimary
          };

        DbContext.UserCards.Add(newCard);
        await DbContext.SaveChangesAsync();

        // Commit the transaction
        await transaction.CommitAsync();

        // Refresh the list of cards
        ExistingCards = await DbContext.UserCards
        .Where(c => c.UserId == user.Id)
        .ToListAsync();

        // Reset input form
        CardInput = new CardInputModel();

        CardStatusMessage = "Card information added successfully.";
        CardStatusMessageType = "alert-success";
      }
      catch
      {
        // Rollback the transaction if any error occurs
        await transaction.RollbackAsync();
        throw;
      }
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error saving card information");
      CardStatusMessage = $"Error: {ex.Message}";
      CardStatusMessageType = "alert-danger";
    }
  }

  private async Task DeleteCardAsync(int cardId)
  {
    try
    {
      var cardToRemove = await DbContext.UserCards.FindAsync(cardId);
      if (cardToRemove != null)
      {
        DbContext.UserCards.Remove(cardToRemove);
        await DbContext.SaveChangesAsync();

        // Refresh the list of cards
        ExistingCards = await DbContext.UserCards
        .Where(c => c.UserId == user.Id)
        .ToListAsync();

        CardStatusMessage = "Card removed successfully.";
        CardStatusMessageType = "alert-success";
      }
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error removing card");
      CardStatusMessage = $"Error removing card: {ex.Message}";
      CardStatusMessageType = "alert-danger";
    }
  }

  private sealed class CardInputModel
  {
    [Required(ErrorMessage = "Card Holder Name is required")]
    [StringLength(100, ErrorMessage = "Card Holder Name cannot be longer than 100 characters")]
    public string? CardHolderName { get; set; }

    [Required(ErrorMessage = "Card Number is required")]
    [StringLength(255, ErrorMessage = "Card Number cannot be longer than 255 characters")]
    public string? CardNumber { get; set; }

    [Required(ErrorMessage = "Expiry Date is required")]
    [DataType(DataType.Date)]
    public DateTime ExpiryDate { get; set; } = DateTime.Now.AddYears(1);

    [Required(ErrorMessage = "CVV is required")]
    [StringLength(255, ErrorMessage = "CVV cannot be longer than 255 characters")]
    public string? Cvv { get; set; }

    public bool IsPrimary { get; set; }
  }
}