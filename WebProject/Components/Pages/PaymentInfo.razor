@page "/paymentinfo"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebProject.Components.Account
@using WebProject.Data
@using WebProject.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Http

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject ILogger<UserCard> Logger
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject ISnackbar Snackbar

@attribute [Authorize]


@rendermode InteractiveServer
<PageTitle>Payment Information</PageTitle>
<MudContainer MaxWidth="MaxWidth.Medium">
  <MudCard Class="pa-6 mb-6 mt-6">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Payment Information</MudText>
    <MudAlert Severity="Severity.Warning" Class="mb-4">
      <strong>Demo Version Warning:</strong> This is a demonstration version. Card details are stored in plain text
      and are not validated or encrypted. <strong>DO NOT</strong> use real credit card information.
    </MudAlert>

    @if (isLoading)
    {
      <MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="margin-bottom: 20px;" />
    }
    else
    {
      <MudGrid>
        <MudItem xs="12" sm="12" md="6">
          <MudCard Elevation="2" Class="pa-4">
            <h4 style="text-align: center;" Class="mb-4">Add New Card</h4>
            @if (ExistingCards.Count >= 3)
            {
              <MudAlert Severity="Severity.Error" Class="mb-4">
                You can only add up to 3 cards.
              </MudAlert>
            }
            else
            {
              <EditForm Model="CardInput" OnValidSubmit="OnValidSubmitCardAsync">
                <DataAnnotationsValidator />
                <MudTextField @bind-Value="CardInput.CardHolderName" Label="Card Holder Name" Required="true"
                  RequiredError="Card Holder Name is required" Variant="Variant.Outlined" Class="mb-3" />

                <MudTextField Mask="@(new PatternMask("0000 0000 0000 0000"))" @bind-Value="CardInput.CardNumber"
                  Label="Card Number" Required="true" RequiredError="Card Number is required" Variant="Variant.Outlined"
                  Clearable Class="mb-3" />

                <MudTextField Mask="@(new DateMask("MM/YY", 'Y', 'M'))" @bind-Value="CardInput.ExpiryDateString"
                  Label="Expiry Date" Required="true" RequiredError="Expiry Date is required" Variant="Variant.Outlined"
                  Class="mb-3" />

                <MudTextField Mask="@(new PatternMask("000"))" @bind-Value="CardInput.Cvv" Label="CVV" Required="true"
                  RequiredError="CVV is required" Variant="Variant.Outlined" Class="mb-3" />

                <MudCheckBox T="bool" @bind-Value="CardInput.IsPrimary" Label="Set as Primary Card" Class="mb-3" />

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                  style="background-color: #ff66a1;color:white" FullWidth="true">
                  Save Card Information
                </MudButton>
              </EditForm>
            }
          </MudCard>
        </MudItem>

        @if (ExistingCards.Any())
        {
          <MudItem xs="12" sm="12" md="6">
            <MudCard Elevation="2" Class="pa-4">
              <h4 style="text-align: center;" Class="mb-4">Existing Cards</h4>
              <MudList T="UserCard" Dense="true">
                @foreach (var card in ExistingCards)
                {
                  <MudListItem T="UserCard" Class="mb-3">
                    <MudGrid Class="align-center">
                      <MudItem xs="8">
                        <MudText Typo="Typo.h6">@card.CardHolderName</MudText>
                        <MudText>**** **** **** @card.CardNumber.Substring(Math.Max(0, card.CardNumber.Length - 4))</MudText>
                        <MudText>Expires: @card.ExpiryDate.ToString("MM/yyyy")</MudText>
                        @if (card.IsPrimary)
                        {
                          <MudText Color="Color.Success">Primary Card</MudText>
                        }
                      </MudItem>
                      <MudItem xs="4" Align="Align.End">
                        <MudButton Variant="Variant.Outlined" Color="Color.Error"
                          OnClick="@(async (e) => { await DeleteCardAsync(card.Id); })">
                          Remove
                        </MudButton>
                      </MudItem>
                    </MudGrid>
                  </MudListItem>
                }
              </MudList>
            </MudCard>
          </MudItem>
        }
      </MudGrid>
    }
  </MudCard>
</MudContainer>


@code {
  private ApplicationUser user = default!;
  private List<UserCard> ExistingCards = new();
  private bool isLoading = true;

  [SupplyParameterFromForm]
  private CardInputModel CardInput { get; set; } = new();

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var httpContext = HttpContextAccessor.HttpContext;
      if (httpContext == null)
      {
        throw new InvalidOperationException("HttpContext is null");
      }

      user = await UserAccessor.GetRequiredUserAsync(httpContext);

      // Fetch existing cards for the current user
      ExistingCards = await DbContext.UserCards
      .Where(c => c.UserId == user.Id)
      .ToListAsync();
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error initializing payment info page");
      Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
    }
    finally
    {
      isLoading = false;
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      isLoading = false;
      await Task.Yield(); // Ensure the method is awaited
      StateHasChanged();
    }
  }

  private async Task OnValidSubmitCardAsync()
  {
    try
    {
      // Check if the user already has 3 cards
      if (ExistingCards.Count >= 3)
      {
        Snackbar.Add("You can only add up to 3 cards.", Severity.Error);
        return;
      }

      // Begin a database transaction to ensure consistency
      await using var transaction = await DbContext.Database.BeginTransactionAsync();

      try
      {
        // If this is the first card, set it as primary
        if (ExistingCards.Count == 0)
        {
          CardInput.IsPrimary = true;
        }

        // If setting this card as primary, update existing primary cards
        if (CardInput.IsPrimary)
        {
          var existingPrimaryCards = await DbContext.UserCards
          .Where(c => c.UserId == user.Id && c.IsPrimary)
          .ToListAsync();

          foreach (var primaryCard in existingPrimaryCards)
          {
            primaryCard.IsPrimary = false;
          }
          await DbContext.SaveChangesAsync();
        }

        // Create new UserCard with all properties
        var newCard = new UserCard
          {
            UserId = user.Id,
            CardHolderName = CardInput.CardHolderName ?? string.Empty,
            CardNumber = CardInput.CardNumber ?? string.Empty,
            ExpiryDate = CardInput.ExpiryDate,
            Cvv = CardInput.Cvv ?? string.Empty,
            IsPrimary = CardInput.IsPrimary
          };

        DbContext.UserCards.Add(newCard);
        await DbContext.SaveChangesAsync();

        // Commit the transaction
        await transaction.CommitAsync();

        // Refresh the list of cards
        ExistingCards = await DbContext.UserCards
        .Where(c => c.UserId == user.Id)
        .ToListAsync();

        // Reset input form
        CardInput = new CardInputModel();

        Snackbar.Add("Card information added successfully.", Severity.Success);
      }
      catch
      {
        // Rollback the transaction if any error occurs
        await transaction.RollbackAsync();
        throw;
      }
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error saving card information");
      Snackbar.Add($"Error: {ex.Message}", Severity.Error);
    }
  }

  private async Task DeleteCardAsync(int cardId)
  {
    try
    {
      var cardToRemove = await DbContext.UserCards.FindAsync(cardId);
      if (cardToRemove != null)
      {
        bool wasPrimary = cardToRemove.IsPrimary;
        DbContext.UserCards.Remove(cardToRemove);
        await DbContext.SaveChangesAsync();

        // Refresh the list of cards
        ExistingCards = await DbContext.UserCards
        .Where(c => c.UserId == user.Id)
        .ToListAsync();

        if (wasPrimary && ExistingCards.Any())
        {
          var newestCard = ExistingCards.OrderByDescending(c => c.Id).First();
          await SetPrimaryCardAsync(newestCard.Id);
        }

        Snackbar.Add("Card removed successfully.", Severity.Success);
      }
    }
    catch (DbUpdateException dbEx)
    {
      Logger.LogError(dbEx, "Error removing card. Inner exception: {InnerException}", dbEx.InnerException?.Message);
      Snackbar.Add($"Error removing card: {dbEx.InnerException?.Message ?? dbEx.Message}", Severity.Error);
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error removing card");
      Snackbar.Add($"Error removing card: {ex.Message}", Severity.Error);
    }
  }

  private async Task SetPrimaryCardAsync(int cardId)
  {
    try
    {
      var cardToSetPrimary = await DbContext.UserCards.FindAsync(cardId);
      if (cardToSetPrimary != null)
      {
        var existingPrimaryCards = await DbContext.UserCards
        .Where(c => c.UserId == user.Id && c.IsPrimary)
        .ToListAsync();

        foreach (var primaryCard in existingPrimaryCards)
        {
          primaryCard.IsPrimary = false;
        }

        cardToSetPrimary.IsPrimary = true;
        await DbContext.SaveChangesAsync();

        // Refresh the list of cards
        ExistingCards = await DbContext.UserCards
        .Where(c => c.UserId == user.Id)
        .ToListAsync();

        Snackbar.Add("Primary card set successfully.", Severity.Success);
      }
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error setting primary card");
      Snackbar.Add($"Error setting primary card: {ex.Message}", Severity.Error);
    }
  }

  private sealed class CardInputModel
  {
    [Required(ErrorMessage = "Card Holder Name is required")]
    [StringLength(100, ErrorMessage = "Card Holder Name cannot be longer than 100 characters")]
    public string? CardHolderName { get; set; }

    [Required(ErrorMessage = "Card Number is required")]
    [StringLength(255, ErrorMessage = "Card Number cannot be longer than 255 characters")]
    public string? CardNumber { get; set; }

    [Required(ErrorMessage = "Expiry Date is required")]
    [StringLength(5, ErrorMessage = "Expiry Date must be in MM/YY format")]
    public string? ExpiryDateString { get; set; }

    [Required(ErrorMessage = "CVV is required")]
    [StringLength(255, ErrorMessage = "CVV cannot be longer than 255 characters")]
    public string? Cvv { get; set; }

    public bool IsPrimary { get; set; }

    public DateTime ExpiryDate
    {
      get
      {
        if (DateTime.TryParseExact(ExpiryDateString, "MM/yy", null, System.Globalization.DateTimeStyles.None, out var date))
        {
          return date;
        }
        return DateTime.MinValue;
      }
    }
  }
}