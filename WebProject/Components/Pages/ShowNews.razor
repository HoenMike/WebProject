@page "/news"
@using Microsoft.EntityFrameworkCore
@using WebProject.Models
@inject ApplicationDbContext DbContext
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using MudBlazor

@rendermode InteractiveServer

<PageTitle>News</PageTitle>
<MudContainer>

  <MudPaper Elevation="2" Class="pa-4 mb-6" style="position: sticky;top:0;z-index: 10;">
    <MudTextField Variant="Variant.Outlined" @bind-Value="searchTerm" Label="Search News"
      AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Immediate="true" Clearable="true"
      OnClearButtonClick="ClearSearch" OnKeyUp="FilterNews" />
  </MudPaper>

  @if (isLoading)
  {
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="margin-bottom: 20px;" />
  }
  else
  {
    @foreach (var news in displayedNews)
    {
      <MudCard Class="mb-6" Elevation="1" style="border-radius: 6px;">
        <MudExpansionPanel Style="margin: 10px 4px; word-break: break-word">
          <TitleContent>
            <MudGrid>
              <MudItem xs="4">
                @if (!string.IsNullOrEmpty(news.ImageUrl))
                {
                  <MudImage Src="@news.ImageUrl" Alt="News Image" Style="width: 100%; height: auto;" />
                }
              </MudItem>
              <MudItem xs="8">
                <MudText Typo="Typo.h5" style="color: #c92e69;" GutterBottom="true"><b>@news.Title</b></MudText>
                <MudText Typo="Typo.caption" Style="font-style: italic; margin-bottom: 4px; display: block">Created By:
                  @news.CreatedBy - @news.CreatedAt</MudText>
                @if (news.UpdatedAt.HasValue)
                {
                  <MudText Typo="Typo.caption" Style="font-style: italic;">Latest Update: @news.UpdatedAt.Value.ToString("g")
                  </MudText>
                }
              </MudItem>
            </MudGrid>
          </TitleContent>
          <ChildContent>
            <MudText Typo="Typo.body1">@news.Content</MudText>
          </ChildContent>
        </MudExpansionPanel>
      </MudCard>
    }
    @if (CanLoadMore)
    {
      <MudGrid Justify="Justify.Center">
        <MudItem>
          <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="LoadMoreNews" Class="mt-4">Load More
          </MudButton>
        </MudItem>
      </MudGrid>
    }
  }
</MudContainer>

@code {
  private const int PageSize = 5;
  private int currentPage = 1;
  private List<News> news = new();
  private List<News> displayedNews = new();
  private bool isLoading = true;
  private string searchTerm = string.Empty;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await LoadNews();
    }
  }

  private async Task LoadNews()
  {
    try
    {
      news = await DbContext.News.ToListAsync();
      ApplyFilter();
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading news: {ex.Message}", Severity.Error);
    }
    finally
    {
      isLoading = false;
      StateHasChanged();
    }
  }

  private void FilterNews()
  {
    currentPage = 1;
    ApplyFilter();
  }

  private void ApplyFilter()
  {
    IEnumerable<News> filteredNews = string.IsNullOrEmpty(searchTerm)
    ? news
    : news.Where(n => n.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    displayedNews = filteredNews.Take(currentPage * PageSize).ToList();
  }

  private void ClearSearch()
  {
    searchTerm = string.Empty;
    currentPage = 1;
    ApplyFilter();
  }

  private void LoadMoreNews()
  {
    currentPage++;
    ApplyFilter();
  }

  private bool CanLoadMore => displayedNews.Count < (string.IsNullOrEmpty(searchTerm) ? news.Count : news.Count(n =>
  n.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
}