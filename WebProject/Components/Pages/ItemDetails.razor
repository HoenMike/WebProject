@page "/item-details/{Id:int}"
@inject ItemController ItemController
@inject CartController CartController
@inject ReviewController ReviewController
@inject WishlistController WishlistController
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@using MudBlazor
<style>
  .item-details-container {
    display: flex;
    background-color: #ffffff;
    border-radius: 10px;
    padding: 30px;
    margin-top: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .item-details-container {
    display: flex;
    background-color: #ffffff;
    border-radius: 8px;
    padding: 30px;
    margin-top: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .item-price {
    font-size: 26px;
    font-weight: bold;
    color: #eb3521;
    margin-top: 12px;
    margin-bottom: 12px;
  }

  .item-name {
    font-size: 30px;
    font-weight: bold;
    margin-bottom: 12px;
    word-break: break-word;
  }

  .quantity-btn {
    background-color: #ededed;
    border: none;
    border-radius: 5px;
    font-size: 20px;
    height: 50px;
    width: 60px;
  }

  .quantity-btn:hover {
    background-color: #bcbcbc;
  }

  .add-to-cart-btn {
    color: #ff66a1;
    border: 2px solid #ff66a1;
    font-size: 15px;
    border-radius: 8px;
    padding: 8px 16px;
  }

  .buy-now-btn {
    background-color: #ff66a1;
    color: white;
    padding: 8px 20px;
    border: none;
    border-radius: 8px;
    font-size: 15px;
    cursor: pointer;
  }

  .add-to-cart-btn:hover {
    background-color: #ff1871;
    color: #ffffff
  }

  .buy-now-btn:hover {
    background-color: #ff1871;
  }

  .rating-container {
    border: 1px solid #FF66A1;
    border-radius: 8px;
    padding: 20px;
    background-color: #FFFBFE;

  }

  .average-rating {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .feedback-container {
    border: 1px solid #c4c4c4;
    border-radius: 8px;
    padding: 20px;

  }
  .mud-input-root input {
    text-align: center; 
    width: 60px; 
    height: 50px;
}
</style>
<MudContainer>
  <div class="item-details-container">
    @if (item != null)
    {
      <MudGrid>
        <MudItem xs="12">
          <MudGrid>
            <MudItem xs="12" md="4">
              @* <MudImage Src="@item.ThumbnailUrl" Alt="@item.Name" Style="width: 100%; border-radius: 8px;" /> *@
               <div class="image-container" style="position: relative">
                        <MudImage Src="@item.ThumbnailUrl" Alt="@item.Name" 
                            Style="width: 100%; border-radius: 8px;z-index: 1;"/>  

                        <MudButton 
                                Style="z-index: 2; position: absolute; top: 0px; right: 0px; background-color: #ffffff; border-radius: 40px; height: 65px;width:65px ;align-items: center;"  
                                 OnClick="@(() => ToggleWishlist(item))">
                                <MudIcon Icon="@Icons.Material.Filled.Favorite" 
                                       Color="@(IsInWishlist(item.Id) ? Color.Error : Color.Default)"
                                       Size="Size.Medium"/>
                        </MudButton>
                  </div>  
            </MudItem>

           
            <MudItem xs="12" md="8">
              <MudText Typo="Typo.h4" class="item-name">@item.Name</MudText>
              <MudGrid>
                <MudItem xs="12" md="12" Class="d-flex align-center flex-wrap" Style="gap: 20px;">
                  <MudItem style="display: flex; align-items: center; gap: 8px;">
                    <MudText Typo="Typo.body1">@averageRating.ToString("0")</MudText>
                    <MudRating SelectedValue="@averageRating" ReadOnly="true" />
                  </MudItem>

                  <MudItem style="display: flex; align-items: center;">
                    <MudText Typo="Typo.body1">@reviews.Count Evaluate</MudText>
                  </MudItem>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.h3" class="item-price">@item.Price.ToString("C")</MudText>
              <MudText Typo="Typo.body1" Class="mb-4">@item.Description</MudText>
              <MudText Typo="Typo.body2" Class="mb-4">Stock: @item.StockQuantity</MudText>
              <MudGrid>
                <!-- Quantity Control -->
                <MudItem xs="12" sm="12" md="12" lg="4" Class="d-flex align-center flex-nowrap" Style="gap: 4px;">
                  <MudItem>
                    <MudIconButton Icon="@Icons.Material.Filled.Remove"
                                    Class="quantity-btn"
                                    OnClick="DecreaseQuantity" />
                  </MudItem>
                  <MudItem>
                    <MudNumericField HideSpinButtons="true" @bind-Value="buyQuantity" Min="1" Max="@item.StockQuantity" Variant="Variant.Outlined" 
                    Class="mud-input-root" 
                     Style="width: 60px; height: 50px;" />
                  </MudItem>
                  <MudItem>
                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                                    Class="quantity-btn"
                                    OnClick="IncreaseQuantity" />
                  </MudItem>
                </MudItem>

                <!-- Action Buttons -->
                <MudItem xs="12" sm="12" md="12" lg="8" Class="d-flex justify-start" Style="gap: 12px;">
                  <MudItem>
                    <MudButton Class="add-to-cart-btn" StartIcon="@Icons.Material.Outlined.ShoppingCart" OnClick="AddToCart" Style="height: 50px;flex: 1;">Add to cart</MudButton>
                  </MudItem>
                  <MudItem>
                    <MudButton Class="buy-now-btn" OnClick="BuyNow" Style="height: 50px;flex: 1;">Buy
                      Now
                    </MudButton>
                    @* <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddToWishlist">
                      Add to Wishlist
                    </MudButton> *@
                  </MudItem>
                </MudItem>
              </MudGrid>

            </MudItem>
          </MudGrid>
        </MudItem>

        <MudItem xs="12" Outlined="true">

          <!-- Review Section -->
          <MudItem xs="12">
            <MudPaper Outlined="true" Class="p-4 mt-2">
              <MudText Typo="Typo.h6">Add a Review</MudText>
              <MudForm @ref="reviewForm" Model="newReview" Validated="OnReviewValidated">
                <MudRating @bind-SelectedValue="newReview.Rating" MaxValue="5" Label="Rating" Required="true" />
                <MudTextField @bind-Value="newReview.Comment" Label="Comment" Required="true" Lines="2" />
                <MudGrid>
                  <MudItem xs="12" style="padding-top: 30px;" Class="d-flex justify-end">
                    <MudButton Size="Size.Medium" Variant="Variant.Filled" style="background-color:#FF66A1;color:#ffffff ;" OnClick="SubmitReview">Submit</MudButton>
                  </MudItem>
                </MudGrid>
              </MudForm>
            </MudPaper>

            <div class="rating-container mt-4">
              <MudGrid>
                <MudItem xs="12" sm="12" md="5" Class="average-rating" style="text-align: center;">
                  <MudText Typo="Typo.h4" Style="color: #FF66A1;font-weight: bold;">@averageRating.ToString("0")/5</MudText>
                  <MudRating SelectedValue="@averageRating" MaxValue="5" ReadOnly="true" Size="Size.Medium" />
                </MudItem>

                <MudItem xs="12" sm="12" md="7" style="display: flex; flex-wrap: wrap; gap: 8px;">
                  <MudChip T="string" Variant="selectedRatings.Count == 0 ? Variant.Filled : Variant.Outlined" Color="Color.Secondary" OnClick="() => { selectedRatings.Clear(); ApplyFilters(); }">
                    All
                  </MudChip>
                  <MudChip T="int" Variant="selectedRatings.Contains(5) ? Variant.Filled : Variant.Outlined" Color="Color.Secondary" OnClick="() => ToggleRatingFilter(5)">
                    5
                    <MudRating SelectedValue="1" ReadOnly="true" MaxValue="1" Size="Size.Small" />
                  </MudChip>
                  <MudChip T="int" Variant="selectedRatings.Contains(4) ? Variant.Filled : Variant.Outlined" Color="Color.Secondary" OnClick="() => ToggleRatingFilter(4)">
                    4
                    <MudRating SelectedValue="1" ReadOnly="true" MaxValue="1" Size="Size.Small" />
                  </MudChip>
                  <MudChip T="int" Variant="selectedRatings.Contains(3) ? Variant.Filled : Variant.Outlined" Color="Color.Secondary" OnClick="() => ToggleRatingFilter(3)">
                    3
                    <MudRating SelectedValue="1" ReadOnly="true" MaxValue="1" Size="Size.Small" />
                  </MudChip>
                  <MudChip T="int" Variant="selectedRatings.Contains(2) ? Variant.Filled : Variant.Outlined" Color="Color.Secondary" OnClick="() => ToggleRatingFilter(2)">
                    2
                    <MudRating SelectedValue="1" ReadOnly="true" MaxValue="1" Size="Size.Small" />
                  </MudChip>
                  <MudChip T="int" Variant="selectedRatings.Contains(1) ? Variant.Filled : Variant.Outlined" Color="Color.Secondary" OnClick="() => ToggleRatingFilter(1)">
                    1
                    <MudRating SelectedValue="1" ReadOnly="true" MaxValue="1" Size="Size.Small" />
                  </MudChip>
                </MudItem>
              </MudGrid>
            </div>
          </MudItem>



          <MudText Typo="Typo.h5" Class="mt-4" style="color: black;">Reviews</MudText>
          @foreach (var review in filteredReviews)
          {
            <div class="feedback-container mt-4">
              <MudGrid style="margin-bottom: 10px;">
                <MudItem xs="12" md="12" Class="d-flex flex-wrap" Style="gap: 10px;">
                  <!-- Content Section -->
                  <MudItem>
                    <!-- Reviewer Name -->
                    <MudText Typo="Typo.h6">@(review.User?.UserName ?? "Anonymous")</MudText>

                    <!-- Rating -->
                    <MudRating MaxValue="5" SelectedValue="@review.Rating" ReadOnly="true" Size="Size.Small" style="padding-right:10px" />

                    <!-- Date -->
                    <MudText Typo="Typo.caption" Style="font-style: italic;">@review.CreatedAt.ToString("dd/MM/yyyy")</MudText>
                  </MudItem>
                </MudItem>
              </MudGrid>

              <MudText Typo="Typo.body1" style="margin-bottom: 10px;word-break: break-word">
                @review.Comment
              </MudText>
            </div>
          }
        </MudItem>
      </MudGrid>
    }
    else
    {
      <MudText Typo="Typo.body1">Item not found</MudText>
    }
  </div>
</MudContainer>

@code {
  [Parameter]
  public int Id { get; set; }

  [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

  private Item? item;
  private int buyQuantity = 1;

  private List<Review> reviews = new();
  private List<Review> filteredReviews = new();
  private Review newReview = new();
  private MudForm? reviewForm;
  private HashSet<int> wishlistItems = new();
  private List<int> selectedRatings = new();
  private int averageRating = 0;

  protected override async Task OnInitializedAsync()
  {
    item = await ItemController.GetItemAsync(Id);
    if (item != null)
    {
      reviews = await ReviewController.GetReviewsByItemIdAsync(Id);
      filteredReviews = new List<Review>(reviews);
      CalculateAverageRating();
    }
    if (await IsUserLoggedIn())
    {
      await LoadWishlist();
    }
  }

  private async Task LoadWishlist()
  {
    try
    {
      var wishlist = await WishlistController.GetWishlistAsync();
      wishlistItems = new HashSet<int>(wishlist.Select(w => w.ItemId));
      StateHasChanged();
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading wishlist: {ex.Message}", Severity.Error);
    }
  }

  private void ToggleRatingFilter(int rating)
  {
    if (selectedRatings.Contains(rating))
    {
      selectedRatings.Remove(rating);
    }
    else
    {
      selectedRatings.Add(rating);
    }
    ApplyFilters();
  }

  private void ApplyFilters()
  {
    if (selectedRatings.Any())
    {
      filteredReviews = reviews.Where(r => selectedRatings.Contains(r.Rating)).ToList();
    }
    else
    {
      filteredReviews = new List<Review>(reviews);
    }
  }

  private void CalculateAverageRating()
  {
    if (filteredReviews.Any())
    {
      averageRating = (int)Math.Ceiling(filteredReviews.Average(r => r.Rating));
    }
    else
    {
      averageRating = 0;
    }
  }

  private void IncreaseQuantity()
  {
    if (buyQuantity < item?.StockQuantity)
    {
      buyQuantity++;
    }
  }

  private void DecreaseQuantity()
  {
    if (buyQuantity > 1)
    {
      buyQuantity--;
    }
  }

  private async Task AddToCart()
  {
    if (!await IsUserLoggedIn())
    {
      var parameters = new DialogParameters { ["ContentText"] = "You need to login to add items to the cart." };
      var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
      var dialog = DialogService.Show<LoginDialog>("Login Required", parameters, options);
      var result = await dialog.Result;

      if (result != null && !result.Canceled)
      {
        Navigation.NavigateTo("/Account/Login");
      }
      return;
    }

    if (item != null)
    {
      try
      {
        await CartController.AddToCartAsync(item, buyQuantity);
        Snackbar.Add($"Added {buyQuantity} {item.Name} to cart", Severity.Success);
      }
      catch (InvalidOperationException ex)
      {
        Snackbar.Add(ex.Message, Severity.Error);
      }
    }
  }

  private async Task BuyNow()
  {
    // Implement buy now functionality
  }


  private async Task SubmitReview()
  {
    await reviewForm.Validate();

    if (reviewForm.IsValid)
    {
      newReview.ItemId = Id;
      newReview.UserId = "currentUserId";
      await ReviewController.AddReviewAsync(newReview);
      Snackbar.Add("Review submitted successfully", Severity.Success);
      reviews.Add(newReview);
      ApplyFilters();
      CalculateAverageRating();
      newReview = new();
    }
  }

  @* private async Task AddToWishlist()
  {
    if (item != null)
    {
      await WishlistController.AddToWishlistAsync(item.Id);
      Snackbar.Add("Item added to wishlist", Severity.Success);
    }
  } *@

  private async Task<bool> IsUserLoggedIn()
  {
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

    return authState.User.Identity?.IsAuthenticated ?? false;
  }

  private async Task AddToWishlist(Item item)
  {
    if (item != null)
    {
      try
      {
        await WishlistController.AddToWishlistAsync(item.Id);
        wishlistItems.Add(item.Id);
        Snackbar.Add("Item added to wishlist", Severity.Success);
        StateHasChanged();
      }
      catch (Exception ex)
      {
        Snackbar.Add($"Error adding to wishlist: {ex.Message}", Severity.Error);
      }
    }
  }
  private void OnReviewValidated()
  {
    // Handle validation if needed
  }

  private bool IsInWishlist(int itemId)
  {
    return wishlistItems.Contains(itemId);
  }
  private async Task ToggleWishlist(Item item)
  {
    if (item != null)
    {
      try
      {
        if (IsInWishlist(item.Id))
        {
          // Remove from wishlist
          await WishlistController.RemoveFromWishlistAsync(item.Id);
          wishlistItems.Remove(item.Id);
          Snackbar.Add("Item removed from wishlist", Severity.Success);
        }
        else
        {
          // Add to wishlist
          await WishlistController.AddToWishlistAsync(item.Id);
          wishlistItems.Add(item.Id);
          Snackbar.Add("Item added to wishlist", Severity.Success);
        }
        StateHasChanged();
      }
      catch (Exception ex)
      {
        Snackbar.Add($"Error updating wishlist: {ex.Message}", Severity.Error);
      }
    }
  }
}