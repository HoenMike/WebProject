@page "/shippinginfo"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebProject.Components.Account
@using WebProject.Data
@using WebProject.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Http

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject ILogger<ShippingInfo> Logger
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer

<PageTitle>Shipping Information</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
  <MudCard Class="pa-4 mb-4 mt-4">
    <MudText Typo="Typo.h3">Shipping Information</MudText>
    @if (isLoading)
    {
      <MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="margin-bottom: 20px;" />
    }
    else
    {
      @if (!string.IsNullOrEmpty(ShippingStatusMessage))
      {
        <MudAlert Severity="@(ShippingStatusMessageType == "alert-success" ? Severity.Success : Severity.Error)">
          @ShippingStatusMessage
        </MudAlert>
      }
      <MudGrid>
        <MudItem xs="12">
          <EditForm Model="ShippingInput" OnValidSubmit="OnValidSubmitPaymentAsync">
            <DataAnnotationsValidator />
            <MudTextField @bind-Value="ShippingInput.ReceiverName" Label="Receiver Name" Required="true"
              RequiredError="Receiver Name is required" />
            <MudTextField @bind-Value="ShippingInput.Address" Label="Address" Required="true"
              RequiredError="Address is required" />
            <MudTextField @bind-Value="ShippingInput.PhoneNumber" Label="Phone Number" Required="true"
              RequiredError="Phone Number is required" />

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
              Save Shipping Information
            </MudButton>
          </EditForm>
        </MudItem>
      </MudGrid>
    }
  </MudCard>
</MudContainer>

@code {
  private ApplicationUser user = default!;
  private string ShippingStatusMessage = string.Empty;
  private string ShippingStatusMessageType = "alert-success";
  private bool isLoading = true;

  [SupplyParameterFromForm]
  private ShippingInputModel ShippingInput { get; set; } = new();

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var httpContext = HttpContextAccessor.HttpContext;
      if (httpContext == null)
      {
        throw new InvalidOperationException("HttpContext is null");
      }

      user = await UserAccessor.GetRequiredUserAsync(httpContext);

      // Fetch existing payment information for the current user
      var existingShippingInfo = await DbContext.UserShippingInfos
      .FirstOrDefaultAsync(u => u.UserId == user.Id);

      if (existingShippingInfo != null)
      {
        ShippingInput = new ShippingInputModel
          {
            ReceiverName = existingShippingInfo.ReceiverName,
            Address = existingShippingInfo.Address,
            PhoneNumber = existingShippingInfo.PhoneNumber,
            PaymentMethod = existingShippingInfo.PaymentMethod
          };
      }
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error initializing shipping info page");
      ShippingStatusMessage = $"An error occurred: {ex.Message}";
      ShippingStatusMessageType = "alert-danger";
    }
    finally
    {
      isLoading = false;
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      isLoading = false;
      StateHasChanged();
    }
  }
  private async Task OnValidSubmitPaymentAsync()
  {
    try
    {
      // Check if a checkout info already exists for this user
      var existingCheckoutInfos = await DbContext.UserShippingInfos
      .Where(u => u.UserId == user.Id)
      .ToListAsync();

      if (existingCheckoutInfos.Count > 1)
      {
        // Remove all existing shipping info records for the user
        DbContext.UserShippingInfos.RemoveRange(existingCheckoutInfos);
      }
      else if (existingCheckoutInfos.Count == 1)
      {
        // Update the existing shipping info record
        var existingCheckoutInfo = existingCheckoutInfos.First();
        existingCheckoutInfo.ReceiverName = ShippingInput.ReceiverName ?? string.Empty;
        existingCheckoutInfo.Address = ShippingInput.Address ?? string.Empty;
        existingCheckoutInfo.PhoneNumber = ShippingInput.PhoneNumber ?? string.Empty;

        DbContext.UserShippingInfos.Update(existingCheckoutInfo);
      }
      else
      {
        // Add new shipping info record
        var newShippingInfo = new UserShippingInfo
          {
            UserId = user.Id,
            ReceiverName = ShippingInput.ReceiverName ?? string.Empty,
            Address = ShippingInput.Address ?? string.Empty,
            PhoneNumber = ShippingInput.PhoneNumber ?? string.Empty,
          };

        DbContext.UserShippingInfos.Add(newShippingInfo);
      }

      await DbContext.SaveChangesAsync();

      ShippingStatusMessage = "Shipping information updated successfully.";
      ShippingStatusMessageType = "alert-success";
    }
    catch (Exception ex)
    {
      Logger.LogError(ex, "Error saving shipping information");
      ShippingStatusMessage = $"Error: {ex.Message}";
      ShippingStatusMessageType = "alert-danger";
    }
  }

  private sealed class ShippingInputModel
  {
    [Required(ErrorMessage = "Receiver Name is required")]
    [StringLength(100, ErrorMessage = "Receiver Name cannot be longer than 100 characters")]
    public string? ReceiverName { get; set; }

    [Required(ErrorMessage = "Address is required")]
    [StringLength(255, ErrorMessage = "Address cannot be longer than 255 characters")]
    public string? Address { get; set; }

    [Required(ErrorMessage = "Phone Number is required")]
    [StringLength(20, ErrorMessage = "Phone Number cannot be longer than 20 characters")]
    public string? PhoneNumber { get; set; }

    [Required(ErrorMessage = "Payment Method is required")]
    public PaymentMethod PaymentMethod { get; set; } = PaymentMethod.Cash;
  }
}