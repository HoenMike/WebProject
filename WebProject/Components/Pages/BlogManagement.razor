@page "/blog_management"
@using Microsoft.EntityFrameworkCore
@using WebProject.Models
@inject ApplicationDbContext DbContext
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using MudBlazor

@rendermode InteractiveServer

<PageTitle>Blogs</PageTitle>

<h3>Blogs</h3>

<MudPaper Class="pa-4 mb-4">
    <MudGrid>
        <MudItem xs="12">
            <MudTextField Variant="Variant.Outlined" @bind-Value="searchTerm" Label="Search Blogs" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Immediate="true" Clearable="true" OnClearButtonClick="ClearSearch" OnKeyUp="FilterBlogs" />
        </MudItem>
        <MudItem xs="4">
            <MudButton Variant="Variant.Filled" OnClick="OpenAddBlogDialog" Color="Color.Secondary" Class="ml-2">Add Blog</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (isLoading)
{
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="margin-bottom: 20px;" />
}
else
{
    <MudTable Items="@displayedBlogs" Hover="true" Striped="true">
        <HeaderContent>
            <MudTh>Image</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate Context="blog">
            <MudTd><img src="@blog.ImageUrl" alt="@blog.Title" style="width: 50px; height: 50px;" /></MudTd>
            <MudTd>@blog.Title</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => OpenEditBlogDialog(blog)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OpenDeleteConfirmationDialog(blog)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<Blog> blogs = new();
    private List<Blog> displayedBlogs = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadBlogs();
        }
    }

    private async Task LoadBlogs()
    {
        try
        {
            blogs = await DbContext.Blogs.ToListAsync();
            displayedBlogs = blogs;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading blogs: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterBlogs()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            displayedBlogs = blogs;
        }
        else
        {
            displayedBlogs = blogs.Where(blog =>
            blog.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        displayedBlogs = blogs;
        StateHasChanged();
    }

    private async Task OpenAddBlogDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<AddBlogDialog>("Add Blog", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadBlogs();
        }
    }

    private async Task OpenDeleteConfirmationDialog(Blog blog)
    {
        var parameters = new DialogParameters
        {
            ["Message"] = $"Are you sure you want to delete the blog '{blog.Title}'?"
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        var dialog = DialogService.Show<ConfirmationDialog>("Delete Blog", parameters, options);
        var result = await dialog.Result;

        if (result != null && result.Data is bool confirmed && confirmed)
        {
            await DeleteBlog(blog);
        }
    }

    private async Task OpenEditBlogDialog(Blog blog)
    {
        var parameters = new DialogParameters { ["Blog"] = blog };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<EditBlogDialog>("Edit Blog", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadBlogs();
        }
    }

    private async Task DeleteBlog(Blog blog)
    {
        try
        {
            DbContext.Blogs.Remove(blog);
            await DbContext.SaveChangesAsync();
            Snackbar.Add("Blog deleted successfully", Severity.Success);
            await LoadBlogs();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting blog: {ex.Message}", Severity.Error);
        }
    }
}
