@page "/itemorders"
@using WebProject.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject ShippingController ShippingController
@using WebProject.Components.Account.Pages

@rendermode InteractiveServer

<PageTitle>Item Orders</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
  <MudTable Dense Items="@orders" Hover="true" Striped="true">
    <HeaderContent>
      <MudTh>Order ID</MudTh>
      <MudTh>Total Price</MudTh>
      <MudTh>Status</MudTh>
      <MudTh>Address</MudTh>
      <MudTh>Created At</MudTh>
      <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="order">
      <MudTd>@order.Id</MudTd>
      <MudTd>@order.TotalPrice.ToString("C")</MudTd>
      <MudTd>
        <MudChip Size="Size.Small" T="string" Color="@GetStatusColor(order.Status)">
          <MudText>@order.Status</MudText>
        </MudChip>
      </MudTd>
      <MudTd>@order.ShippingAddress</MudTd>
      <MudTd>@order.CreatedAt.ToString("g")</MudTd>
      <MudTd>
        <AuthorizeView Roles="Shipper">
          <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => AssignOrderToShipper(order.Id)">
              Accept Order
            </MudButton>
          </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="Admin">
          <Authorized>
            @{
              var itemShipper = itemShippers.FirstOrDefault(itemShipper => itemShipper.OrderId == order.Id);
              var shipperName = itemShipper != null
                      ? DbContext.Users.FirstOrDefault(user => user.Id == itemShipper.ShipperId)?.UserName
                      : null;
            }
            @if (shipperName != null)
            {
              <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudText>Assigned Shipper: @shipperName</MudText>
                @if (order.Status != "Delivery Successful")
                {
                  <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Error"
                    OnClick="() => CancelOrder(order.Id)">
                    Cancel
                  </MudButton>
                }
              </MudStack>
            }
            else
            {
              <span>Not Assigned</span>
            }
          </Authorized>
        </AuthorizeView>
      </MudTd>
    </RowTemplate>
  </MudTable>
</MudContainer>

@code {
  private List<Order> orders = new();
  private List<ItemShipper> itemShippers = new();
  private string currentUserRole;

  protected override async Task OnInitializedAsync()
  {
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    currentUserRole = user.IsInRole("Admin") ? "Admin"
    : user.IsInRole("Shipper") ? "Shipper"
    : "";

    await LoadOrders();
    await LoadItemShippers();
  }

  private async Task LoadOrders()
  {
    if (currentUserRole == "Admin")
    {
      // For Admin, load ALL orders
      orders = await DbContext.Orders.ToListAsync();
    }
    else if (currentUserRole == "Shipper")
    {
      // For Shipper, load only unassigned orders and orders with Status = Cancelled
      orders = await DbContext.Orders
      .Where(o => (o.Status == "Pending" &&
      !DbContext.ItemShippers.Any(itemShipper => itemShipper.OrderId == o.Id)) ||
      o.Status == "Cancelled")
      .ToListAsync();
    }
    StateHasChanged();
  }

  private async Task LoadItemShippers()
  {
    itemShippers = await DbContext.ItemShippers.ToListAsync();
    StateHasChanged();
  }

  private async Task AssignOrderToShipper(int orderId)
  {
    try
    {
      await ShippingController.AssignOrderToShipper(orderId);
      Snackbar.Add("Order assigned successfully", Severity.Success);
      await LoadOrders();
      await LoadItemShippers();
    }
    catch (InvalidOperationException ex)
    {
      Snackbar.Add($"{ex.Message}. Please refresh the page and try again.", Severity.Error);
    }
  }

  private async Task CancelOrder(int orderId)
  {
    try
    {
      await ShippingController.CancelOrder(orderId);
      Snackbar.Add("Order cancelled successfully", Severity.Success);
      await LoadOrders();
      await LoadItemShippers();
      StateHasChanged();
    }
    catch (InvalidOperationException ex)
    {
      Snackbar.Add($"{ex.Message}. Please refresh the page and try again.", Severity.Error);
    }
  }

  private Color GetStatusColor(string status) => status switch
  {
    "Cancelled" => Color.Error,
    "Pending" => Color.Default,
    "Success" => Color.Success,
    "On Delivery" => Color.Info,
    "Delivery Successful" => Color.Success,
    _ => Color.Warning
  };
}