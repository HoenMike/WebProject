@page "/"
@using Microsoft.EntityFrameworkCore
@using WebProject.Data
@inject ApplicationDbContext DbContext
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using MudBlazor

@rendermode InteractiveServer
<style>
    .promotion-container {
        height: 450px; 
        width: 100%;
        display: flex; 
        justify-content: center; 
        align-items: center; 
        background-image: url('https://www.shutterstock.com/image-vector/sweet-food-seamless-pattern-flat-600nw-2477598415.jpg'); 
        background-size: cover; 
        background-position: center;
    }

    .promotion-container::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 450px; 
    background-color: rgba(255, 255, 255, 0.8); /* Lớp phủ để làm mờ */
}
</style>
<PageTitle>Home</PageTitle>
<MudPaper Class="pa-4 mb-4">
    <MudGrid>
        <MudItem xs="12">
            <MudTextField Variant="Variant.Outlined" @bind-Value="searchTerm" Label="Search Items"
                AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Immediate="true"
                Clearable="true" OnClearButtonClick="ClearSearch" OnKeyUp="FilterItems" />
        </MudItem>
    </MudGrid>
</MudPaper>

<div style="height: 500px; display: flex; justify-content: center; align-items: center;">
    <MudPaper Class="promotion-container pa-0 mb-4">
        @if (isPromotesLoading)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else if (!activePromotes.Any())
        {
            <MudText>No Promotion available</MudText>
        }
        else
        {
            <MudCarousel TData="Promote" ShowArrows="true" ShowBullets="true" AutoCycle="true "
                AutoCycleTime="TimeSpan.FromMilliseconds(3000)" Class="my-4" Style="height: 400px; width: 700px; border-radius: 8px;">
                @foreach (var promote in activePromotes)
                {
                    <MudCarouselItem>
                        <MudImage Src="@promote.ImageUrl" Alt="Promotion Image" ObjectFit="ObjectFit.Contain" Class="rounded-lg"
                            Style="width: 100%; height: 100%;" />
                    </MudCarouselItem>
                }
            </MudCarousel>
        }
    </MudPaper>
</div>

@if (isLoading)
{
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="margin-bottom: 20px;" />
}
else
{
    <MudTable Items="@displayedItems" Hover="true" Striped="true">
        <HeaderContent>
            <MudTh>Image</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Description</MudTh>
        </HeaderContent>
        <RowTemplate Context="item">
            <MudTd>
                <MudImage Src="@item.ThumbnailUrl" Alt="@item.Name" Style="width: 50px; height: 50px; cursor: pointer;"
                    @onclick="@(() => NavigateToItemDetails(item.Id))" />
            </MudTd>
            <MudTd>
                <MudLink Href="@($"/item-details/{item.Id}")">
                    @item.Name
                </MudLink>
            </MudTd>
            <MudTd>@item.Price.ToString("C")</MudTd>
            <MudTd>@item.Description</MudTd>

        </RowTemplate>
    </MudTable>
}

@code {
    private List<Item> items = new();
    private List<Item> displayedItems = new();
    private List<Promote> activePromotes = new();
    private bool isLoading = true;
    private bool isPromotesLoading = true;
    private string searchTerm = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadItems();
            await LoadActivePromotes();
        }
    }

    private void NavigateToItemDetails(int itemId)
    {
        NavigationManager.NavigateTo($"/item-details/{itemId}");
    }

    private async Task LoadItems()
    {
        try
        {
            items = await DbContext.Items.ToListAsync();
            displayedItems = items;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading items: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadActivePromotes()
    {
        try
        {
            var promotes = await DbContext.Promotes
            .Where(p => p.IsActive)
            .OrderByDescending(p => p.Id)
            .Take(10)
            .ToListAsync();
            activePromotes = promotes;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading promotes: {ex.Message}", Severity.Error);
        }
        finally
        {
            isPromotesLoading = false;
            StateHasChanged();
        }
    }

    private void FilterItems()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            displayedItems = items;
        }
        else
        {
            displayedItems = items.Where(item =>
            item.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        displayedItems = items;
        StateHasChanged();
    }

    private async Task OpenAddItemDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<AddItemDialog>("Add Item", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadItems();
        }
    }

    private async Task OpenDeleteConfirmationDialog(Item item)
    {
        var parameters = new DialogParameters
            {
                ["Message"] = $"Are you sure you want to delete the item '{item.Name}'?"
            };
        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };
        var dialog = DialogService.Show<ConfirmationDialog>("Delete Item", parameters, options);
        var result = await dialog.Result;

        if (result != null && result.Data is bool confirmed && confirmed)
        {
            await DeleteItem(item);
        }
    }

    private async Task OpenEditItemDialog(Item item)
    {
        var parameters = new DialogParameters { ["Item"] = item };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<EditItemDialog>("Edit Item", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadItems();
        }
    }

    private async Task DeleteItem(Item item)
    {
        try
        {
            DbContext.Items.Remove(item);
            await DbContext.SaveChangesAsync();
            Snackbar.Add("Item deleted successfully", Severity.Success);
            await LoadItems();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting item: {ex.Message}", Severity.Error);
        }
    }
}