@page "/shipperdashboard"
@using WebProject.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject ShippingController ShippingController
@inject IDialogService DialogService

<PageTitle>Shipper Dashboard</PageTitle>

<MudContainer>
  <MudTable Dense Items="@assignedOrders" Hover="true" Striped="true">
    <HeaderContent>
      <MudTh>Order ID</MudTh>
      <MudTh>Total Price</MudTh>
      <MudTh>Status</MudTh>
      <MudTh>Information</MudTh>
      <MudTh>Assigned At</MudTh>
      <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate Context="order">
      <MudTd>@order.Id</MudTd>
      <MudTd>@order.TotalPrice.ToString("C")</MudTd>
      <MudTd>
        <MudChip Size="Size.Small" T="string" Color="@GetStatusColor(order.Status)">
          <MudText>@order.Status</MudText>
        </MudChip>
      </MudTd>
      <MudTd>@order.ShippingAddress</MudTd>
      <MudTd>@order.AssignedAt.ToLocalTime().ToString("g")</MudTd>
      <MudTd>
        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Info"
          OnClick="() => UpdateOrderStatus(order.Id, OrderStatus.OnDelivery)">
          Delivering
        </MudButton>
        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Success"
          OnClick="() => UpdateOrderStatus(order.Id, OrderStatus.DeliverySuccessful)">
          Successful
        </MudButton>
        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Error"
          OnClick="() => ConfirmCancelOrder(order.Id)">
          Cancel
        </MudButton>
      </MudTd>
    </RowTemplate>
  </MudTable>
</MudContainer>

@code {
  public enum OrderStatus
  {
    OnDelivery,
    DeliverySuccessful,
    Cancelled
  }

  private List<OrderViewModel> assignedOrders = new();
  private string currentUserId = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;
    currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

    await LoadAssignedOrders();
  }

  private async Task LoadAssignedOrders()
  {
    assignedOrders = await DbContext.ItemShippers
    .Where(itemShipper => itemShipper.ShipperId == currentUserId)
    .Include(itemShipper => itemShipper.Order)
    .Select(itemShipper => new OrderViewModel
      {
        Id = itemShipper.Order.Id,
        TotalPrice = itemShipper.Order.TotalPrice,
        Status = itemShipper.Order.Status,
        ShippingAddress = itemShipper.Order.ShippingAddress,
        AssignedAt = itemShipper.AssignedAt
      })
    .ToListAsync();

    StateHasChanged();
  }

  private async Task UpdateOrderStatus(int orderId, OrderStatus newStatus)
  {
    string statusString = newStatus switch
    {
      OrderStatus.OnDelivery => "On Delivery",
      OrderStatus.DeliverySuccessful => "Delivery Successful",
      OrderStatus.Cancelled => "Cancelled",
      _ => newStatus.ToString()
    };

    var parameters = new DialogParameters
      {
        ["Message"] = $"Are you sure you want to set the order status to '{statusString}'?"
      };
    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
    var dialog = DialogService.Show<ConfirmationDialog>("Confirm Status Update", parameters, options);
    var result = await dialog.Result;

    if (!result.Canceled && result.Data is bool confirmed && confirmed)
    {
      try
      {
        await ShippingController.UpdateOrderStatus(orderId, statusString);
        Snackbar.Add("Order status updated successfully", Severity.Success);
        await LoadAssignedOrders();
      }
      catch (InvalidOperationException ex)
      {
        Snackbar.Add($"{ex.Message}. Please refresh the page and try again.", Severity.Error);
      }
    }
  }

  private async Task ConfirmCancelOrder(int orderId)
  {
    var parameters = new DialogParameters
      {
        ["Message"] = "Are you sure you want to cancel this order?"
      };
    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
    var dialog = DialogService.Show<ConfirmationDialog>("Cancel Order", parameters, options);
    var result = await dialog.Result;

    if (!result.Canceled && result.Data is bool confirmed && confirmed)
    {
      await CancelOrder(orderId);
    }
  }

  private async Task CancelOrder(int orderId)
  {
    try
    {
      await ShippingController.CancelOrder(orderId);
      Snackbar.Add("Order cancelled successfully", Severity.Success);
      await LoadAssignedOrders();
    }
    catch (InvalidOperationException ex)
    {
      Snackbar.Add($"{ex.Message}. Please refresh the page and try again.", Severity.Error);
    }
  }
  private Color GetStatusColor(string status) => status switch
  {
    "Cancelled" => Color.Error,
    "Pending" => Color.Default,
    "Success" => Color.Success,
    "On Delivery" => Color.Info,
    "Delivery Successful" => Color.Success,
    _ => Color.Warning
  };

  private class OrderViewModel
  {
    public int Id { get; set; }
    public decimal TotalPrice { get; set; }
    public string Status { get; set; }
    public string ShippingAddress { get; set; }
    public DateTime AssignedAt { get; set; }
  }
}