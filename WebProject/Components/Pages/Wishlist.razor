@page "/wishlist"
@inject WishlistController WishlistController
@inject ItemController ItemController
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject CartController CartController
@using MudBlazor

@attribute [Authorize]

<PageTitle>My Wishlist</PageTitle>

<style>
  .add-to-cart-btn {
    color: #ffffff;
    background-color: #ff66a1;
    padding: 8px;
    border-radius: 4px;
    width: 50px;
  }

  .add-to-cart-btn:hover {
    background-color: #ff1871;
    color: #ffffff
  }

  .item-name {
    text-decoration: none;
    font-weight: bold;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .item-name:hover {
    color: #ff1871;
  }

  .item-price {
    font-weight: bold;
    color: #ff1871;
  }

  .quantity-btn {
    background-color: #ededed;
    border: none;
    border-radius: 4px;
    width: 50px;
    height: 50px;
  }

  .mud-input-root input {
    text-align: center;
  }

  .quantity-btn:hover {
    background-color: #bcbcbc;
  }
</style>

<MudContainer>
  <MudPaper Elevation="2" Class="pa-4 mb-6">
    <MudGrid>
      <MudItem xs="12">
        <MudTextField Variant="Variant.Outlined" @bind-Value="searchTerm" Label="Search Items"
          AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Immediate="true" Clearable="true"
          OnClearButtonClick="ClearSearch" OnKeyUp="FilterItems" />
      </MudItem>
    </MudGrid>
  </MudPaper>
  @if (isLoading)
  {
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
  }
  else if (wishlistItems.Any())
  {
    <MudGrid>
      @foreach (var item in wishlistItems)
      {
        <MudItem Style="width:300px">
          <MudCard Style="word-break: break-word; border-radius:10px;">
            <div class="image-container" style="position: relative">
              <MudImage Src="@item.ThumbnailUrl" Alt="@item.Name"
                Style="width: 150px; height: 260px; min-height: 260px; width: 100%; cursor: pointer; padding:20px; padding-bottom:0px;z-index: 1;"
                @onclick="@(() => NavigateToItemDetails(item.Id))" />
              <MudButton Class="wishlist-button"
                Style="z-index: 2; position: absolute; top: 0px; right: 0px; background-color: #ffffff; border-radius: 40px; height: 65px; align-items: center;"
                OnClick="@(() => RemoveFromWishlist(item))">
                <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" FontSize="50px" />
              </MudButton>
            </div>
            <MudCardContent>
              <MudLink Href="@($"/item-details/{item.Id}")" style="text-decoration: none;">
                <MudText Typo="Typo.h6" class="item-name">@item.Name</MudText>
              </MudLink>
              <div style="display: flex; justify-content: space-between; align-items: center;">
                <MudText Typo="Typo.h6" class="item-price">@item.Price.ToString("C")</MudText>
                <MudText Typo="Typo.body2">Stock: @item.StockQuantity</MudText>
              </div>
            </MudCardContent>
            <MudCardActions>
              <MudGrid Style="margin-left:4px; margin-right: 4px; margin-bottom: 10px;">
                <MudItem xs="2" Class="d-flex justify-center" Style="width:100%">
                  <MudIconButton Icon="@Icons.Material.Filled.Remove" Class="quantity-btn"
                    OnClick="@(() => DecreaseQuantity(item.Id))" />
                </MudItem>

                <MudItem xs="3" Class="d-flex justify-center">
                  <MudNumericField HideSpinButtons="true" Value="@GetItemQuantity(item.Id)"
                    ValueChanged="@((int value) => SetItemQuantity(item.Id, value))" Min="1" Max="@item.StockQuantity"
                    Variant="Variant.Outlined" Class="mud-input-root" Style="width:50px;height:50px" />
                </MudItem>

                <MudItem xs="3" Class="d-flex justify-center" Style="width:100%">
                  <MudIconButton Icon="@Icons.Material.Filled.Add" Class="quantity-btn"
                    OnClick="@(() => IncreaseQuantity(item.Id))" />
                </MudItem>

                <MudItem xs="4" Class="d-flex justify-center">
                  <MudIconButton Icon="@Icons.Material.Outlined.ShoppingCart" Class="add-to-cart-btn"
                    OnClick="@(() => AddToCart(item))" Size="Size.Medium" />
                </MudItem>
              </MudGrid>
            </MudCardActions>
          </MudCard>
        </MudItem>
      }
    </MudGrid>
  }
  else
  {
    <MudText>No items in your wishlist.</MudText>
  }
</MudContainer>

@code {
  private List<Item> wishlistItems = new();
  private Dictionary<int, int> itemQuantities = new();
  private bool isLoading = true;
  private string searchTerm = string.Empty;
  private List<Item> originalWishlistItems = new List<Item>();


  protected override async Task OnInitializedAsync()
  {
    await LoadWishlistItems();
  }

  private async Task LoadWishlistItems()
  {
    try
    {
      isLoading = true;
      var wishlist = await WishlistController.GetWishlistAsync();
      var items = new List<Item>();

      foreach (var wish in wishlist)
      {
        var item = await ItemController.GetItemAsync(wish.ItemId);
        if (item != null)
        {
          items.Add(item);
          itemQuantities[item.Id] = 1; // Default quantity
        }
      }

      wishlistItems = items;
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading wishlist: {ex.Message}", Severity.Error);
    }
    finally
    {
      isLoading = false;
    }
  }
  private void FilterItems()
  {
    if (originalWishlistItems.Count == 0)
    {
      // Sao lưu danh sách gốc trước khi lọc
      originalWishlistItems = new List<Item>(wishlistItems);
    }

    if (!string.IsNullOrWhiteSpace(searchTerm))
    {
      // Lọc danh sách dựa trên từ khóa tìm kiếm
      wishlistItems = originalWishlistItems
      .Where(item => item.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
      .ToList();
    }
    else
    {
      wishlistItems = new List<Item>(originalWishlistItems);
      StateHasChanged();
    }
  }

  private void ClearSearch()
  {
    // Khôi phục lại danh sách gốc
    wishlistItems = new List<Item>(originalWishlistItems);
    searchTerm = string.Empty; // Xóa từ khóa tìm kiếm
    StateHasChanged();
  }
  private void NavigateToItemDetails(int itemId)
  {
    NavigationManager.NavigateTo($"/item-details/{itemId}");
  }

  private async Task RemoveFromWishlist(Item item)
  {
    try
    {
      await WishlistController.RemoveFromWishlistAsync(item.Id);
      wishlistItems.Remove(item);
      Snackbar.Add("Item removed from wishlist", Severity.Success);
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error removing from wishlist: {ex.Message}", Severity.Error);
    }
  }

  private int GetItemQuantity(int itemId)
  {
    return itemQuantities.ContainsKey(itemId) ? itemQuantities[itemId] : 1;
  }

  private void SetItemQuantity(int itemId, int value)
  {
    if (value >= 1)
    {
      var item = wishlistItems.FirstOrDefault(i => i.Id == itemId);
      if (item != null && value <= item.StockQuantity)
      {
        itemQuantities[itemId] = value;
      }
    }
  }

  private void IncreaseQuantity(int itemId)
  {
    var item = wishlistItems.FirstOrDefault(i => i.Id == itemId);
    if (item != null && GetItemQuantity(itemId) < item.StockQuantity)
    {
      itemQuantities[itemId] = GetItemQuantity(itemId) + 1;
    }
  }

  private void DecreaseQuantity(int itemId)
  {
    if (GetItemQuantity(itemId) > 1)
    {
      itemQuantities[itemId] = GetItemQuantity(itemId) - 1;
    }
  }

  private async Task AddToCart(Item item)
  {
    try
    {
      var quantity = GetItemQuantity(item.Id);
      await CartController.AddToCartAsync(item, quantity);
      Snackbar.Add($"Added {quantity} {item.Name} to cart", Severity.Success);
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error adding to cart: {ex.Message}", Severity.Error);
    }
  }
}
