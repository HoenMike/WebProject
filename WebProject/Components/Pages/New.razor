@page "/new"
@using Microsoft.EntityFrameworkCore
@using WebProject.Models
@inject ApplicationDbContext DbContext
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using MudBlazor

@rendermode InteractiveServer

<PageTitle>News</PageTitle>

<MudPaper Class="pa-4 mb-4">
    <MudTextField Variant="Variant.Outlined" @bind-Value="searchTerm" Label="Search News" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Immediate="true" Clearable="true" OnClearButtonClick="ClearSearch" OnKeyUp="FilterNews" />
</MudPaper>

@if (isLoading)
{
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="margin-bottom: 20px;" />
}
else
{
    @foreach (var news in displayedNews)
    {
        <MudExpansionPanel Style="margin: 10px; word-break: break-word">
            <TitleContent>
                <MudText Typo="Typo.h6" GutterBottom="true">@news.Title</MudText>
                <MudText Typo="Typo.caption" Style="font-style: italic; margin-bottom: 4px; display: block">Created By: @news.CreatedBy - @news.CreatedAt</MudText>
                @if (news.UpdatedAt.HasValue)
                {
                    <MudText Typo="Typo.caption" Style="font-style: italic;">Latest Update: @news.UpdatedAt.Value.ToString("g")</MudText>
                }

            </TitleContent>
            <ChildContent>
                <MudText Typo="Typo.body1">@news.Content</MudText>
            </ChildContent>
        </MudExpansionPanel>
    }
}

@code {
    private List<News> news = new();
    private List<News> displayedNews = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadNews();
        }
    }

    private async Task LoadNews()
    {
        try
        {
            news = await DbContext.News.ToListAsync();
            displayedNews = news.OrderByDescending(news => news.CreatedAt).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading news: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterNews()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            displayedNews = news;
        }
        else
        {
            displayedNews = news.Where(news =>
            news.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        displayedNews = news;
        StateHasChanged();
    }

    private async Task OpenAddNewsDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<AddNewsDialog>("Add News", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadNews();
        }
    }

    private async Task OpenDeleteConfirmationDialog(News news)
    {
        var parameters = new DialogParameters
            {
                ["Message"] = $"Are you sure you want to delete the news '{news.Title}'?"
            };
        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };
        var dialog = DialogService.Show<ConfirmationDialog>("Delete News", parameters, options);
        var result = await dialog.Result;

        if (result != null && result.Data is bool confirmed && confirmed)
        {
            await DeleteNews(news);
        }
    }

    private async Task OpenEditNewsDialog(News news)
    {
        var parameters = new DialogParameters { ["News"] = news };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<EditNewsDialog>("Edit News", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadNews();
        }
    }

    private async Task DeleteNews(News news)
    {
        try
        {
            DbContext.News.Remove(news);
            await DbContext.SaveChangesAsync();
            Snackbar.Add("News deleted successfully", Severity.Success);
            await LoadNews();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting news: {ex.Message}", Severity.Error);
        }
    }
}