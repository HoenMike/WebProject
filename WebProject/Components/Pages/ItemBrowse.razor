@page "/itembrowse"
@inject ItemController ItemController
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using MudBlazor
@using Microsoft.EntityFrameworkCore
@using WebProject.Data
@inject ApplicationDbContext DbContext
@inject CartController CartController
@inject NavigationManager Navigation
@inject WishlistController WishlistController


@rendermode InteractiveServer
<style>
    .add-to-cart-btn {
        color: #ff66a1;
        border: 2px solid #ff66a1;
        padding: 8px 16px;
    }
    .add-to-cart-btn:hover {
        background-color: #ff1871;
        color: #ffffff
    }
    .item-name{
        text-decoration: none;
        font-weight: bold;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    .item-name:hover {
        color: #ff1871;
    }
    .item-price {
        font-weight: bold;
        color: #ff1871;
    }
    .quantity-btn {
    background-color: #ffffff;
    border: 1px #c5bfbf solid;
  }


  .quantity-btn:hover {
    background-color: #e4dede;
  }
</style>
<PageTitle>Browse</PageTitle>
<MudContainer>
  <MudPaper Elevation="3" Class="pa-4 mb-4">
    <MudGrid>
      <MudItem xs="12">
        <MudTextField Variant="Variant.Outlined" @bind-Value="searchTerm" Label="Search Items"
          AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Immediate="true" Clearable="true"
          OnClearButtonClick="ClearSearch" OnKeyUp="FilterItems" />
      </MudItem>
    </MudGrid>
  </MudPaper>
  @if (isLoading)
  {
      <MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="margin-bottom: 20px;" />
  }
  else
  {
      <MudGrid>
          @foreach (var item in displayedItems)
          {
              <MudItem Style="width:300px;">
                  <MudCard Style="word-break: break-word; border-radius:15px;">
                      <div class="image-container" style="position: relative">
                      <MudImage Src="@item.ThumbnailUrl" Alt="@item.Name" Style="width: 150px; min-height: 250px; height: 250px; width: 100%; cursor: pointer; padding:15px; z-index: 1;"
                      @onclick="@(() => NavigateToItemDetails(item?.Id ?? 0))" />  
                      <MudButton Class="wishlist-button"
                              Style="z-index: 2; position: absolute; top: 0px; right: 0px; background-color: #ffffff; border-radius: 40px; height: 65px; align-items: center;"  
                              OnClick="AddToWishlist">
                              <MudIcon Icon="@Icons.Material.Filled.Favorite" FontSize="50px" />
                      </MudButton>
                      </div>              
                      <MudCardContent>
                                  <MudLink Href="@($"/item-details/{item?.Id}")">
                                      <MudText Typo="Typo.h5" class="item-name">@item?.Name</MudText>
                                  </MudLink>
                          <MudText Typo="Typo.h6" class="item-price">@item?.Price.ToString("C")</MudText>
                      </MudCardContent>
                      <MudCardActions>
                          <MudGrid Style="margin-left:2px">
                              <MudItem xs="2" Class="d-flex justify-center" Style="width:100%">
                                  <MudButton Class="quantity-btn"
                                          OnClick="DecreaseQuantity">-</MudButton>
                              </MudItem>
                              <MudItem xs="3" Class="d-flex justify-center" Style="width: 100%">
                                  <MudNumericField HideSpinButtons="true"
                                                @bind-Value="buyQuantity"
                                                Min="1"
                                                Max="@item.StockQuantity"
                                                Variant="Variant.Outlined"
                                                Style="width: 100%" />
                              </MudItem>
                              <MudItem xs="2" Class="d-flex justify-center" Style="width:100%">
                                  <MudButton Class="quantity-btn"
                                          OnClick="IncreaseQuantity">+</MudButton>
                              </MudItem>
                              <MudItem xs="5" Class="d-flex justify-center">
                                  <MudButton Class="add-to-cart-btn"
                                          StartIcon="@Icons.Material.Outlined.ShoppingCart"
                                          OnClick="AddToCart"
                                          Style="width:100%; padding-left: 25px;">
                                  </MudButton>
                              </MudItem>
                          </MudGrid>
                      </MudCardActions>
                  </MudCard>
              </MudItem>
          }
      </MudGrid>
  }
</MudContainer>


@code {
  private List<Item> items = new();
  private List<Item> displayedItems = new();
  private bool isLoading = true;
  private string searchTerm = string.Empty;
  [Parameter]
  public int Id { get; set; }
  private Item? item;
  private int buyQuantity = 1;




  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await LoadItems();
    }
  }


  private void NavigateToItemDetails(int itemId)
  {
    if (itemId > 0)
    {
      NavigationManager.NavigateTo($"/item-details/{itemId}");
    }
  }


  private async Task LoadItems()
  {
    try
    {
      items = await DbContext.Items.OrderByDescending(item => item.Id).ToListAsync();
      displayedItems = items;
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading items: {ex.Message}", Severity.Error);
    }
    finally
    {
      isLoading = false;
      StateHasChanged();
    }
  }


  private void FilterItems()
  {
    if (string.IsNullOrEmpty(searchTerm))
    {
      displayedItems = items;
    }
    else
    {
      displayedItems = items.Where(item =>
      item.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true
      ).ToList();
    }
  }


  private void ClearSearch()
  {
    searchTerm = string.Empty;
    displayedItems = items;
    StateHasChanged();
  }
    protected override async Task OnInitializedAsync()
    {
        item = await DbContext.Items.FirstOrDefaultAsync(i => i.Id == Id);
    }




    private void IncreaseQuantity()
    {
        if (buyQuantity < item?.StockQuantity)
        {
            buyQuantity++;
        }
    }




    private void DecreaseQuantity()
    {
        if (buyQuantity > 1)
        {
            buyQuantity--;
        }
    }




    private async Task AddToCart()
    {
        if (!IsUserLoggedIn())
        {
            var parameters = new DialogParameters { ["ContentText"] = "You need to login to add items to the cart." };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
var dialog = DialogService.Show<LoginDialog>("Login Required", parameters, options);
            var result = await dialog.Result;




            if (result != null && !result.Canceled)
            {
                Navigation.NavigateTo("/Account/Login");
            }
            return;
        }




        if (item != null)
        {
            try
            {
                await CartController.AddToCartAsync(item, buyQuantity);
                Snackbar.Add($"Added {buyQuantity} {item.Name} to cart", Severity.Success);
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
    private async Task AddToWishlist()
    {
    if (item != null)
    {
      await WishlistController.AddToWishlistAsync(item.Id);
      Snackbar.Add("Item added to wishlist", Severity.Success);
    }
    }




    private bool IsUserLoggedIn()
    {
        return true;
    }
}
