@page "/itembrowse"
@inject ItemController ItemController
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using MudBlazor

@rendermode InteractiveServer

<PageTitle>Browse</PageTitle>
<MudContainer>
  <MudPaper Elevation="3" Class="pa-4 mb-4">
    <MudGrid>
      <MudItem xs="12">
        <MudTextField Variant="Variant.Outlined" @bind-Value="searchTerm" Label="Search Items"
          AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Immediate="true" Clearable="true"
          OnClearButtonClick="ClearSearch" OnKeyUp="FilterItems" />
      </MudItem>
    </MudGrid>
  </MudPaper>

  @if (isLoading)
  {
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="margin-bottom: 20px;" />
  }
  else
  {
    <MudTable Elevation="3" Items="@displayedItems" Hover="true" Striped="true">
      <HeaderContent>
        <MudTh>Image</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Stock Quantity</MudTh>
      </HeaderContent>
      <RowTemplate Context="item">
        <MudTd>
          <MudImage Src="@item?.ThumbnailUrl" Alt="@item?.Name" Style="width: 50px; height: 50px; cursor: pointer;"
            @onclick="@(() => NavigateToItemDetails(item?.Id ?? 0))" />
        </MudTd>
        <MudTd>
          <MudLink Href="@($"/item-details/{item?.Id}")">
            @item?.Name
          </MudLink>
        </MudTd>
        <MudTd>@item.Price.ToString("C")</MudTd>
        <MudTd>@item.Description</MudTd>
        <MudTd>@item.StockQuantity</MudTd>
      </RowTemplate>
    </MudTable>
  }
</MudContainer>

@code {
  private List<Item> items = new();
  private List<Item> displayedItems = new();
  private bool isLoading = true;
  private string searchTerm = string.Empty;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await LoadItems();
    }
  }

  private void NavigateToItemDetails(int itemId)
  {
    if (itemId > 0)
    {
      NavigationManager.NavigateTo($"/item-details/{itemId}");
    }
  }

  private async Task LoadItems()
  {
    try
    {
      items = await ItemController.GetItemsAsync();
      displayedItems = items;
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading items: {ex.Message}", Severity.Error);
    }
    finally
    {
      isLoading = false;
      StateHasChanged();
    }
  }

  private void FilterItems()
  {
    if (string.IsNullOrEmpty(searchTerm))
    {
      displayedItems = items;
    }
    else
    {
      displayedItems = items.Where(item =>
      item.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true
      ).ToList();
    }
  }

  private void ClearSearch()
  {
    searchTerm = string.Empty;
    displayedItems = items;
    StateHasChanged();
  }

  private async Task OpenAddItemDialog()
  {
    var parameters = new DialogParameters();
    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
    var dialog = DialogService.Show<AddItemDialog>("Add Item", parameters, options);
    var result = await dialog.Result;

    if (result != null && !result.Canceled)
    {
      await LoadItems();
    }
  }

  private async Task OpenDeleteConfirmationDialog(Item item)
  {
    if (item == null) return;

    var parameters = new DialogParameters
      {
        ["Message"] = $"Are you sure you want to delete the item '{item.Name}'?"
      };
    var options = new DialogOptions
      {
        CloseButton = true,
        MaxWidth = MaxWidth.Small,
        FullWidth = true
      };
    var dialog = DialogService.Show<ConfirmationDialog>("Delete Item", parameters, options);
    var result = await dialog.Result;

    if (result != null && result.Data is bool confirmed && confirmed)
    {
      await DeleteItem(item);
    }
  }

  private async Task OpenEditItemDialog(Item item)
  {
    if (item == null) return;

    var parameters = new DialogParameters { ["Item"] = item };
    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
    var dialog = DialogService.Show<EditItemDialog>("Edit Item", parameters, options);
    var result = await dialog.Result;

    if (result != null && !result.Canceled)
    {
      await LoadItems();
    }
  }

  private async Task DeleteItem(Item item)
  {
    if (item == null) return;

    try
    {
      await ItemController.DeleteItemAsync(item);
      Snackbar.Add("Item deleted successfully", Severity.Success);
      await LoadItems();
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error deleting item: {ex.Message}", Severity.Error);
    }
  }
}